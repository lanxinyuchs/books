<?xml version="1.0" encoding="UTF-8"?>
<!--
	Copyright (c) 2016 Ericsson AB. 
	All rights reserved 

	DX ECIM Tool-chain generated this file on Jan 18, 2016 3:49:52 PM using:
	* com.ericsson.ecim.m2m 2.14.5.201511210257
	* com.ericsson.ecim.dsl 2.14.5.201511210257
	* com.ericsson.ecim.edm 2.14.5.201511210257
--><!DOCTYPE models SYSTEM "mp.dtd">
<models>
    <dtdVersion>G</dtdVersion>
    <momMetaData>
        <momTitle>ECIM SWM</momTitle>
        <momSubTitle>sub title</momSubTitle>
        <momIdentity>
            <docNum>2/155 54-CNX 901 2637</docNum>
            <docLang>English</docLang>
            <docRev>0</docRev>
            <docDate>2016-01-18</docDate>
        </momIdentity>
        <createdBy>
            <signature>ETXJOTJ</signature>
        </createdBy>
    </momMetaData>
    <mim author="ETXJOTJ" contact="ETXJOTJ" correction="1" date="2016-01-26" docNo="2/155 54-CNX 901 2637" name="RcsSwM" namespace="urn:com:ericsson:ecim:RcsSwM" namespacePrefix="rcsswm" organization="BURA DURA BT OM MW1" release="1" revision="A" version="3">
        <description>ECIM Software management model.</description>
        <domainExtension domain="ECIM">
            <extension name="ecimMomName" value="ECIM_SwM"/>
            <extension name="ecimMomVersion" value="4"/>
            <extension name="ecimMomRelease" value="1"/>
        </domainExtension>
        <implements name="ECIM_SwM" release="1" version="4"/>
        <struct name="ActivationStep">
            <description>Activation step details.</description>
            <structMember name="serialNumber">
                <description>Activation step number.The position of the activation step in the activation procedure.Starts at 1.</description>
                <int16/>
            </structMember>
            <structMember name="name">
                <description>Activation step name.</description>
                <string/>
            </structMember>
            <structMember name="description">
                <description>Textual description of the activation step.&#13;
It can describe the role, meaning, or interpretation of the activation step, or any information which is useful to the operator.</description>
                <string/>
            </structMember>
        </struct>
        <struct name="AsyncActionProgress">
            <description>Records the progress of an asynchronous action.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <structMember name="actionName">
                <description>Name of the invoked asynchronous action.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <string/>
            </structMember>
            <structMember name="additionalInfo">
                <description>Used for logging significant messages during execution of an action.</description>
                <sequence>
                    <string/>
                    <minLength>0</minLength>
                </sequence>
            </structMember>
            <structMember name="progressInfo">
                <description>Textual information that describes the actual state of the action execution.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <string/>
            </structMember>
            <structMember name="progressPercentage">
                <description>Progress of the action.&#13;
The range is between 0 and 100.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <uint8/>
            </structMember>
            <structMember name="result">
                <description>Result state of a completed action.&#13;
This field has value NOT_AVAILABLE if the action is not finished.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <enumRef name="ActionResultType">
                    <mimName>RcsSwM</mimName>
                </enumRef>
            </structMember>
            <structMember name="resultInfo">
                <description>Textual description of the outcome/result of the action containing useful information for the NMS.&#13;
If the action failed, it can contain an error message.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <string/>
            </structMember>
            <structMember name="state">
                <description>Current state of the action.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <enumRef name="ActionStateType">
                    <mimName>RcsSwM</mimName>
                </enumRef>
            </structMember>
            <structMember name="actionId">
                <description>Uniquely identifies the invocation of an action.&#13;
Identifies the invocation of an action when the managed object allows invocation of more than one action at a time.</description>
                <domainExtension domain="ECIM">
                    <extension name="isKey" value="true"/>
                </domainExtension>
                <derivedDataTypeRef name="ActionInvocationResult">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="timeActionStarted">
                <description>Date and time when the current action was started.</description>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="timeActionCompleted">
                <description>Date and time when the action was completed (successfully or unsuccessfully).</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="timeOfLastStatusUpdate">
                <description>Date and time when the struct member state was last updated.</description>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
        </struct>
        <struct name="AsyncActionProgressWithSteps">
            <description>The progress of an ongoing action.&#13;
Some actions can have 1 or more breakpoints.Breakpoints allow an action to be divided into defined steps. A breakpoint is an intentional stop of an executing action, for example, the  Activate action in the ECIM SwM MOM. The activate action puts an upgrade package into operation. A breakpoint represents a part of the upgrade,after which the functionality of the ME can be observed manually.In other words, the breakpoints give the operator an option to verify manually that the upgrade step has been executed correctly. The ProgressReport MOC models a standard action. This MOC struct has the same attributes as the ProgressReport MOC, plus two extra attributes, step and stepProgressPercentage.step stores the current execution action step. stepProgressPercentage stores the progress percentage of the currently executing action step.</description>
            <structMember name="actionName">
                <description>Name of the invoked action, for example, prepare(), verify(), activate() on UpgradePackage MO.</description>
                <string/>
            </structMember>
            <structMember name="additionalInfo">
                <description>Used to log significant messages during execution of an action.&#13;
It contains information about the history of the execution.This field contains the log entries as an array. It can be empty.This information is for display only. It is not recommended to build any logic on the content of this field.</description>
                <sequence>
                    <string/>
                    <minLength>0</minLength>
                </sequence>
            </structMember>
            <structMember name="progressInfo">
                <description>Description of the actual state of the execution, which can be useful or required by NMS.&#13;
This information is for display only. It is not recommended to build any logic on the content of this field.</description>
                <string/>
            </structMember>
            <structMember name="progressPercentage">
                <description>This represents the overall progress for completion of the action. Range is between 0 and 100.&#13;
 It calculates the percentage with regard to time.</description>
                <uint8/>
            </structMember>
            <structMember name="result">
                <description>Result of completed action.This field has a value NOT_AVAILABLE if the action is not finished.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <enumRef name="ActionResultType">
                    <mimName>RcsSwM</mimName>
                </enumRef>
            </structMember>
            <structMember name="resultInfo">
                <description>Textual description of the outcome or result of the action.&#13;
 It contains useful information for the NMS. For example, it can contain an error message if the action failed. This information is for display only. It is not recommended to build any logic on the content of this field.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <string/>
            </structMember>
            <structMember name="state">
                <description>Current state of the action.</description>
                <enumRef name="ActionStateType">
                    <mimName>RcsSwM</mimName>
                </enumRef>
            </structMember>
            <structMember name="actionId">
                <description>Id of the action. Each action has an action id. The Id is used to query the progress of an action.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <uint16/>
            </structMember>
            <structMember name="timeActionStarted">
                <description>The date and time when the current action started.</description>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="timeActionCompleted">
                <description>The date and time when the action completed successfully or unsuccessfully.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="timeOfLastStatusUpdate">
                <description>The date and time of the last MO Struct update. The last date and time when any attribute changed.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="step">
                <description>Current execution action step number.&#13;
 &#13;
</description>
                <int16/>
            </structMember>
            <structMember name="stepProgressPercentage">
                <description>This represents the progress percentage of the currently executing step.&#13;
It goes from 0 to 100 percentage for each and every step.</description>
                <int8/>
            </structMember>
        </struct>
        <struct name="ProductData">
            <description>Represents an Ericsson software product.&#13;
The product name, product number, and product revision represent product information stored in PRIM realization part.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <structMember name="productName">
                <description>Name of the product.</description>
                <string/>
            </structMember>
            <structMember name="productNumber">
                <description>Product number of the product.</description>
                <string/>
            </structMember>
            <structMember name="productRevision">
                <description>Revision state of the product.</description>
                <string/>
            </structMember>
            <structMember name="productionDate">
                <description>Production date of the product.</description>
                <derivedDataTypeRef name="DateTime">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="description">
                <description>Free text description of the product.</description>
                <string/>
            </structMember>
            <structMember name="type">
                <description>Free text description of the product type.</description>
                <string/>
            </structMember>
        </struct>
        <struct name="EcimPassword">
            <description>Stores the password.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <structMember name="cleartext">
                <description>Indicates whether or not the password is entered in cleartext.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <derivedDataTypeRef name="EcimEmpty">
                    <mimName>RcsSwM</mimName>
                </derivedDataTypeRef>
            </structMember>
            <structMember name="password">
                <description>Holds the password or passphrase text.</description>
                <domainExtension domain="ECIM">
                    <extension name="isKey" value="true"/>
                </domainExtension>
                <string/>
            </structMember>
        </struct>
        <enum name="ActionCapabilityState">
            <description>Indicates the readiness of Software Management function for executing actions.</description>
            <enumMember name="CAPABLE">
                <description>The Software Management function is in a state where it is capable to execute all actions.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="WAIT">
                <description>The Software Management function is in a state where some actions are unavailable.</description>
                <value>2</value>
            </enumMember>
        </enum>
        <enum name="ActionStateType">
            <description>Lists the action states.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <enumMember name="CANCELLING">
                <description>Cancellation is in progress.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="RUNNING">
                <description>The execution of the action is currently in progress.</description>
                <value>2</value>
            </enumMember>
            <enumMember name="FINISHED">
                <description>The action is finished.</description>
                <value>3</value>
            </enumMember>
            <enumMember name="CANCELLED">
                <description>The action has been cancelled and cancellation has been done.</description>
                <value>4</value>
            </enumMember>
        </enum>
        <enum name="ActionResultType">
            <description>Lists the different results of an action.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <enumMember name="SUCCESS">
                <description>The asynchronous action ended with success.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="FAILURE">
                <description>The asynchronous action ended with failure.</description>
                <value>2</value>
            </enumMember>
            <enumMember name="NOT_AVAILABLE">
                <description>No result is available yet.</description>
                <value>3</value>
            </enumMember>
        </enum>
        <enum name="SwMTimeoutFallbackCapability">
            <description>Fallback support.</description>
            <enumMember name="SUPPORTED">
                <description>Shows that the fallback capability is supported.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="NOT_SUPPORTED">
                <description>Shows that the fallback capability is not supported.</description>
                <value>2</value>
            </enumMember>
        </enum>
        <enum name="UpgradePackageState">
            <description>Lists possible states of the Upgrade Package.</description>
            <enumMember name="INITIALIZED">
                <description>The Upgrade Package is initialized.&#13;
The administrative data and activation steps of the UP can be read.In this state, only the prepare() action can be called.</description>
                <value>1</value>
            </enumMember>
            <enumMember name="PREPARE_IN_PROGRESS">
                <description>Prepare action in progress.&#13;
In this state, only the cancel() action can be called. If the prepare() action completes successfully, the UP moves to state PREPARE_COMPLETED . If the prepare() action fails, or cancel() is called, the UP moves back to state INITIALIZED .</description>
                <value>2</value>
            </enumMember>
            <enumMember name="PREPARE_COMPLETED">
                <description>Prepare action has finished successfully.&#13;
In this state, only the verify() or the activate() action can be called. If the activate() action is called, the UP moves to state ACTIVATION_IN_PROGRESS .</description>
                <value>3</value>
            </enumMember>
            <enumMember name="ACTIVATION_IN_PROGRESS">
                <description>Activation is in progress.&#13;
In this state, only the cancel() action can be called. If the cancel() action is called, the UP moves to state DEACTIVATION_IN_PROGRESS. If the activation step completes successfully, the UP moves to state ACTIVATION_STEP_COMPLETED .</description>
                <value>4</value>
            </enumMember>
            <enumMember name="ACTIVATION_STEP_COMPLETED">
                <description>The previous activation step completed successfully.&#13;
There are still more activation steps left. In this state, only the activate() or the cancel() action can be called. If the cancel() action is called, the UP moves to state DEACTIVATION_IN_PROGRESS . If the activate() action is called, the ME starts the activation of the next activation step and the UP moves to state ACTIVATION_IN_PROGRESS . If the fallback timer expires in this state, the UP moves to state DEACTIVATION_IN_PROGRESS .</description>
                <value>5</value>
            </enumMember>
            <enumMember name="WAITING_FOR_COMMIT">
                <description>The last activation step completed successfully.&#13;
The operator must confirm the upgrade. In this state, only the confirm() or the cancel() action can be called. If the cancel() action is called, the UP moves to state DEACTIVATION_IN_PROGRESS. If the confirm() action is called, the UP moves to state COMMIT_COMPLETED .&#13;
</description>
                <value>6</value>
            </enumMember>
            <enumMember name="COMMIT_COMPLETED">
                <description>The upgrade is confirmed.The whole upgrade procedure has completed.</description>
                <value>7</value>
            </enumMember>
            <enumMember name="DEACTIVATION_IN_PROGRESS">
                <description>Deactivation of the UP is in progress.&#13;
This can be the result of a cancel() action, or the fallback timer has expired. In this state, no action can be called. At the end of fallback operation, the UP moves back to state PREPARE_COMPLETED.</description>
                <value>8</value>
            </enumMember>
        </enum>
        <derivedDataType name="ActionInvocationResult">
            <description>This is the datatype for the Asychronous Action Id. </description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <baseType>
                <uint16/>
            </baseType>
        </derivedDataType>
        <derivedDataType name="EcimPasswordString">
            <description>This type enables secure handling of passwords.</description>
            <baseType>
                <string/>
            </baseType>
        </derivedDataType>
        <derivedDataType name="DateTime">
            <description>Represents the international standard for the representation of date and time ( ISO 8601).&#13;
The string format is "YYYY-MM-DDThh:mm:ss.SSSZ" (excluding quotes).&#13;
A DateTime string consists of a date part, a time part, and an optional time zone information part. The time zone part may be a "Z", representing the Coordinated Universal Time (UTC) time zone (equals to +00) or a time zone offset (for example, +02:00).&#13;
If the time zone part is not present, the DateTime value represents local time.&#13;
&#13;
The following pattern describes the DateTime format:&#13;
YYYY-MM-DDThh:mm:ss[.S+][Z|+-hh:mm]&#13;
Where:&#13;
YYYY = Four digit year&#13;
MM = Two digit month (01=January, and so on)&#13;
DD = Two digit day of month (01 through 31)&#13;
T = Time designator (shows start of time component)&#13;
hh = Two digits of hour (00 through 23, AM/PM not allowed)&#13;
mm = Two digits of minute (00 through 59)&#13;
ss = Two digits of second (00 through 59, leap second not allowed)&#13;
S+ = One or more digits of decimal fraction of a second&#13;
Z = Time is UTC&#13;
+- = + or - character indicating positive or negative offset to UTC &#13;
&#13;
DateTime values are compliant with ISO 8601 "Representation of dates and times" but are restricted according to RFC 3339 "Date and Time on the Internet: Timestamps". The DateTime format is further restricted as follows:&#13;
- T and Z designators are upper case.&#13;
- . (dot) is used to indicate start of fractions of seconds (ISO 8601 also allows comma)&#13;
&#13;
</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <baseType>
                <string>
                    <lengthRange>
                        <min>19</min>
                        <max>31</max>
                    </lengthRange>
                    <stringLength>
                        <subrange>
                            <min>19</min>
                            <max>31</max>
                        </subrange>
                    </stringLength>
                    <validValues>^([0-9]{4})-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([\.][0-9]+){0,1}(([\+|\-](0[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?)|(Z)?)$</validValues>
                </string>
            </baseType>
            <validationRules>
                <rule exceptionText="" format="posix_ere" name="Pattern Constraint"><![CDATA[^([0-9]{4})-(1[0-2]|0[1-9])-(0[1-9]|[1|2][0-9]|3[0-1])T(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])([\.][0-9]+){0,1}(([\+|\-](0[0-9]|1[0-9]|2[0-4])(:[0-5][0-9])?)|(Z)?)$]]></rule>
            </validationRules>
        </derivedDataType>
        <derivedDataType name="EcimEmpty">
            <description>Represents a leaf that has no value, it conveys information by its presence or absence.</description>
            <domainExtension domain="ECIM">
                <extension name="originatingMimVersion" value="2"/>
                <extension name="originatingMimName" value="ECIM_CommonLibrary"/>
                <extension name="originatingMimRelease" value="0"/>
            </domainExtension>
            <baseType>
                <boolean/>
            </baseType>
        </derivedDataType>
        <class name="SwM">
            <description>The root structural element of SW management activities.</description>
            <systemCreated/>
            <root/>
            <action name="cancel">
                <description>Cancel can be invoked during any long-lasting operation.&#13;
It stops the operation and restores the consistent state that existed before the long-lasting operation started. The action returns immediately after invocation. The consequences of the action can be tracked by attribute progressReport. The action returns false if the action is refused by the ME. In all other cases, it returns true.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <action name="removeUpgradePackage">
                <description>Removes an UpgradePackage.&#13;
This action removes the UpgradePackage MO specified as action parameter. It also removes all files temporarily stored in the ME and associated with the UP. The action returns immediately after invocation. The progress of the action can be tracked by attribute progressReport. This action can be invoked when there is no other action in progress on this MO. The action returns false if the action could not start for any reason, for example, another parallel action is in progress. In all other cases, it returns true.</description>
                <returnType>
                    <boolean/>
                </returnType>
                <parameter name="upgradePackage">
                    <description>An UpgradePackage MO to be removed.</description>
                    <in/>
                    <dataType>
                        <moRef name="UpgradePackage">
                            <mimName>RcsSwM</mimName>
                        </moRef>
                    </dataType>
                </parameter>
            </action>
            <action name="createUpgradePackage">
                <description>Creates a new UpgradePackage MO that represents a UP specified by a URI.&#13;
This action includes all activities to initialize the UP MO. After the UP MO is created, all descriptive information is available, for example, administrativeData, number or names of activation step data. This action can be invoked when there is no other action in progress on this MO. The action returns immediately after invocation. The progress of the action can be tracked by attribute progressReport . The action returns 0 if the action cannot start for any reason, for example, another parallel action is in progress. The action also returns 0 if the ME cannot handle the URI, for example, it does not support the protocol specified in the URI. In all other cases, it returns the id of the action. The action id is different and unique for every invocation of the action.</description>
                <returnType>
                    <uint16/>
                </returnType>
                <parameter name="uri">
                    <description>Contains a URI that points to a directory that contains the UP content.&#13;
The generic URI syntax is defined by RFC 2396. The URI must not contain any password. The password must be provided in the second parameter of this action. The URI can be local absolute, for example, file:///data/dir/subdir. It can also be remote, for example, sftp://hostname/dir/subdir.</description>
                    <in/>
                    <dataType>
                        <string/>
                    </dataType>
                </parameter>
                <parameter name="password">
                    <description>A password to the server that provides the UP.&#13;
If authentication is not password-based, this parameter is ignored.</description>
                    <domainExtension domain="ECIM">
                        <extension name="isNillable" value="true"/>
                    </domainExtension>
                    <isNillable/>
                    <in/>
                    <dataType>
                        <derivedDataTypeRef name="EcimPasswordString">
                            <mimName>RcsSwM</mimName>
                        </derivedDataTypeRef>
                    </dataType>
                </parameter>
            </action>
            <action name="removeSoftwareVersion">
                <description>Removes a SW version as much as possible.&#13;
It does not disturb node functionality. Files shared with other SW versions are not deleted.&#13;
The active SW version cannot be removed. This action can only be invoked when there is no other action in progress on this MO. The action returns false if any of these conditions are violated.</description>
                <returnType>
                    <boolean/>
                </returnType>
                <parameter name="swVersion">
                    <description>The value component of the RDN of the SwVersion MO in ECIM_SWIM to be removed.</description>
                    <in/>
                    <dataType>
                        <moRef name="SwVersion">
                            <mimName>RcsSwIM</mimName>
                        </moRef>
                    </dataType>
                </parameter>
            </action>
            <attribute name="reportProgress">
                <description>Represents the progress report, including the result, of the ongoing action.&#13;
This MO supports only one action execution at a time.&#13;
</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <structRef name="AsyncActionProgress">
                        <mimName>RcsSwM</mimName>
                    </structRef>
                </dataType>
            </attribute>
            <attribute name="fallbackTimer">
                <description>Maximum interval in seconds within which the next action must be invoked to avoid fallback.&#13;
The maximum number of seconds allowed to elapse between the finish of an activation step and the start of the next new activate() action or new confirm() action. This attribute holds the value to which attribute timeRemainingBeforeFallback is set after the action activate() is successfully completed. -1 means infinity. In this case, the start value of timeRemainingBeforeFallback must also be set to -1 when the timer starts, even though no countdown ever starts (it remains always -1).</description>
                <dataType>
                    <int16>
                        <defaultValue>1200</defaultValue>
                    </int16>
                </dataType>
            </attribute>
            <attribute name="swMId">
                <description>Holds the name used when identifying the MO.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="timeRemainingBeforeFallback">
                <description>Remaining number of seconds before performing fallback.&#13;
Value -1 indicates an infinite number of seconds. Fallback means that the system returns to state PREPARE_COMPLETED .</description>
                <noNotification/>
                <readOnly/>
                <dataType>
                    <int16>
                        <defaultValue>-1</defaultValue>
                    </int16>
                </dataType>
            </attribute>
            <attribute name="localFileStorePath">
                <description>URI of the directory where the UPs are stored on the ME.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="userLabel">
                <description>Used for free-text description. </description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="timeoutFallbackCapability">
                <description>Shows whether fallback capability is supported or not.&#13;
If fallback capability is not supported, setting SwM fallbackTimer has no effect and automatic fallback does not occur.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <noNotification/>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <enumRef name="SwMTimeoutFallbackCapability">
                        <defaultValue>SUPPORTED</defaultValue>
                        <mimName>RcsSwM</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="actionCapable">
                <description>Shows whether the Software Management function is in a state of readiness to execute actions.&#13;
The Managed Element sets it to WAIT during any operations and maintenance activity that causes one or more of the Software Management function related actions to become unavailable. The Management System should wait until the state returns to CAPABLE before invoking any Software Management action.</description>
                <readOnly/>
                <dataType>
                    <enumRef name="ActionCapabilityState">
                        <defaultValue>CAPABLE</defaultValue>
                        <mimName>RcsSwM</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="actionCapableInfo">
                <description>Additional information relating to actionCapable. &#13;
Provides free-text information if available about the managed element operation or maintenance activity causing actionCapable to be at state WAIT.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
        </class>
        <class name="UpgradePackage">
            <description>Controls the change process of the software configuration of a ME.&#13;
 An instance of UpgradePackage (UP) represents a specific change&#13;
of software configuration from the existing one to the new one identified by the attribute administrativeData. The execution of the change process described by UP class is the normal way to change the content of the SW inventory. An UP can be seen as a modification agent. It can add new, remove, or modify functionality. The sequence in which a Software upgrade executes is as follows: &#13;
1. Prepare&#13;
2. Verify, which is optional&#13;
3. Activate &#13;
4. Confirm&#13;
When the upgrade package MO is created the upgrade control file is downloaded to specify the administrative data and the activation steps for this upgrade.</description>
            <systemCreated/>
            <action name="activate">
                <description>Current upgrade package is taken into operation fully or partially. &#13;
Partial activation occurs if the UCF defines activation steps and attribute ignoreBreakPoints is false. The ME upgrade engine notifies the operator that the activation step is completed. The next activation step starts when the operator invokes an activate action. Each UP must have at least 1 activation step. When attribute ignoreBreakPoints=true, all activation steps are executed in sequence. When an activation step is complete, the ME executes the next activation step. That means there is no operator invocation when an activation step is complete. The time for observation of correct operation of the ME, after each completed step, is always monitored by a supervision timer. The invocation of activate() can be monitored by a supervision timer. If the supervision timer expires before invocation of activate() or confirm(), the activation fails and the ME falls back to state PREPARE_COMPLETED. The action returns immediately after invocation. The progress of the action can be tracked by attribute progressReport. The action returns false if the action could not start for any reason, for example, another parallel action is in progress. In all other cases, it returns true. This action can be invoked when the state is PREPARE_COMPLETED or ACTIVATION_STEP_COMPLETED. If the action is invoked in a state where the action has no meaning, ME is expected to return an error message.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <action name="cancel">
                <description>Cancel can be invoked during any long-lasting operation.&#13;
Stops the operation and restores the consistent state that existed before the long-lasting operation started. Furthermore, cancel() can also be invoked when the UP is in state WAITING_FOR_COMMIT or ACTIVATION_STEP_COMPLETED without having a long-lasting operation in progress. Calling cancel() in this state orders the ME to restore the state that existed before the activation procedure started. The action returns immediately after invocation. The consequences of the action can be tracked by attribute progressReport. The action returns false if the action is refused by the ME. If the action is invoked in a state where the action has no meaning, the ME is expected to return false. In all other cases, it returns true. This action can be invoked when the UP state is PREPARE_IN_PROGRESS, ACTIVATION_IN_PROGRESS, ACTIVATION_STEP_COMPLETED, or WAITING_FOR_COMMIT.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <action name="verify">
                <description>Verifies the ability to activate the current upgrade package.&#13;
The action returns immediately after invocation. The progress of the action can be tracked by attribute progressReport. The action returns false if the action could not start for any reason, for example, another parallel action is in progress. In all other cases, it returns true. This action can be invoked when the state is PREPARE_COMPLETED. If the action is invoked in a state where the action has no meaning, the ME is expected to return an error message.This action can be called as an option in the whole upgrade procedure. The action can be called more than once if required.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <action name="prepare">
                <description>Prepares the Managed Element for activation of the current upgrade package.&#13;
Executing prepare() does not have any negative impact on the in-service performance of the Managed Element. The action returns immediately after invocation. The progress of the action can be tracked by attribute progressReport. The action returns false if the action could not start for any reason, for example, another parallel action is in progress. In all other cases, it returns true.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <action name="confirm">
                <description>Stops the activation fallback timer and confirms the upgrade. &#13;
The action returns when the synchronous action is completed. This action can be invoked when the state is WAITING_FOR_COMMIT. The action returns true on success, false on failure.</description>
                <returnType>
                    <boolean/>
                </returnType>
            </action>
            <attribute name="state">
                <description>Current state of Upgrade Package.</description>
                <readOnly/>
                <dataType>
                    <enumRef name="UpgradePackageState">
                        <mimName>RcsSwM</mimName>
                    </enumRef>
                </dataType>
            </attribute>
            <attribute name="reportProgress">
                <description>Represents the progress report, including the result, of the ongoing action.&#13;
This MO supports only one action execution at a time.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <structRef name="AsyncActionProgressWithSteps">
                        <mimName>RcsSwM</mimName>
                    </structRef>
                </dataType>
            </attribute>
            <attribute name="upgradePackageId">
                <description>Holds the name used when identifying the MO.</description>
                <mandatory/>
                <noNotification/>
                <restricted/>
                <key/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="ignoreBreakPoints">
                <description>Influences the behavior of the activate() action.&#13;
False means there is a breakpoint between each activation step. Activation process stops at each breakpoint. True means execution ignores breakpoints between activation steps and instead executes the end-to-end activation process. This invokes all activation steps in sequence, assuming no errors occur.</description>
                <dataType>
                    <boolean>
                        <defaultValue>true</defaultValue>
                    </boolean>
                </dataType>
            </attribute>
            <attribute name="userLabel">
                <description>Used for free-text description. </description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="administrativeData">
                <description>The product identification of the software versions that are activated when an upgrade is completed.&#13;
If the resulting software version after activation is unknown or uncertain, the administrativeData can be empty.</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <structRef name="ProductData">
                            <mimName>RcsSwM</mimName>
                        </structRef>
                        <minLength>1</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="activationStep">
                <description>List of activation steps in the activation procedure. &#13;
It is possible to stop after each step, perform supervision, and continue with the procedure.The upgrade procedure consists of at least one activation step.</description>
                <readOnly/>
                <dataType>
                    <sequence>
                        <structRef name="ActivationStep">
                            <mimName>RcsSwM</mimName>
                        </structRef>
                        <minLength>1</minLength>
                    </sequence>
                </dataType>
            </attribute>
            <attribute name="created">
                <description>Date and time  this Upgrade Package instance is created.</description>
                <readOnly/>
                <dataType>
                    <derivedDataTypeRef name="DateTime">
                        <mimName>RcsSwM</mimName>
                    </derivedDataTypeRef>
                </dataType>
            </attribute>
            <attribute name="uri">
                <description>A URI that points to the directory where the UP can be found.&#13;
The URI can be local, for example, file://data/dir/subdir. It can also be remote, for example, ftp://hostname/dir/subdir.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <string/>
                </dataType>
            </attribute>
            <attribute name="creatorActionId">
                <description>The Id of the action that created this UpgradePackage MO.&#13;
Default value 0 shows that the ME does not record this information.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <noNotification/>
                <readOnly/>
                <isNillable/>
                <dataType>
                    <uint16>
                        <defaultValue>0</defaultValue>
                    </uint16>
                </dataType>
            </attribute>
            <attribute name="password">
                <description>Password to the server that provides the UpgradePackage.</description>
                <domainExtension domain="ECIM">
                    <extension name="isNillable" value="true"/>
                </domainExtension>
                <isNillable/>
                <dataType>
                    <structRef name="EcimPassword">
                        <mimName>RcsSwM</mimName>
                    </structRef>
                </dataType>
            </attribute>
        </class>
        <relationship name="SwM_to_UpgradePackage">
            <containment>
                <parent>
                    <hasClass name="SwM">
                        <mimName>RcsSwM</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="UpgradePackage">
                        <mimName>RcsSwM</mimName>
                    </hasClass>
                    <cardinality>
                        <min>0</min>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="false"/>
                    <extension name="canDelete" value="false"/>
                </domainExtension>
                <notCreatable/>
                <notDeleteable/>
            </containment>
        </relationship>
    </mim>
    <interMim>
        <relationship name="SystemFunctions_to_SwM">
            <containment>
                <parent>
                    <hasClass name="SystemFunctions">
                        <mimName>ECIM_Top</mimName>
                    </hasClass>
                </parent>
                <child>
                    <hasClass name="SwM">
                        <mimName>RcsSwM</mimName>
                    </hasClass>
                    <cardinality>
                        <min>1</min>
                        <max>1</max>
                    </cardinality>
                </child>
                <domainExtension domain="ECIM">
                    <extension name="canCreate" value="false"/>
                    <extension name="canDelete" value="false"/>
                </domainExtension>
                <notCreatable/>
                <notDeleteable/>
            </containment>
        </relationship>
    </interMim>
</models>
