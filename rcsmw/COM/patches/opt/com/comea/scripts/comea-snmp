#!/bin/sh
##
## Copyright (c) 2011Ericsson AB, 2009 - 2010.
##
## All Rights Reserved. Reproduction in whole or in part is prohibited
## without the written consent of the copyright owner.
##
## ERICSSON MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE
## SUITABILITY OF THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING
## BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY,
## FITNESS FOR A PARTICULAR PURPOSE, OR NON-INFRINGEMENT. ERICSSON
## SHALL NOT BE LIABLE FOR ANY DAMAGES SUFFERED BY LICENSEE AS A
## RESULT OF USING, MODIFYING OR DISTRIBUTING THIS SOFTWARE OR ITS
## DERIVATIVES.
##
##

# The script is designed to work in a limited linux environment where the support of certain utilities
# like for instance ps and pgrep varies.
# This is a bourne shell script and is free from any non compatible syntax (e.g bash specific features)

#####################################################
## etxarnu 2014-04-07  Modified for use in RBS CS
## Changes:
##  140407 etxarnu   Use COMEA_CONF_DIR instead of COMEA_ROOT_DIR in R/W dirs
##                   Use host IP address instead of localhost in snmpget
##                   Modified SNMPD_LOGGING
##  140416 etxarnu   Check that correct pid is killed
##  140422 etxarnu   Added unset LD_PRELOAD
##  140528 etxarnu   Comment for SNMPD_LOGGING debug version
##  140818 etxtory   comea-snmp as root
##  150203 etxlg     Try to run in network namespace
##  150513 etxarnu   Merged with new version in COM 5.0 CP7
##  150520 etxarnu   Added OAM_NET_NS stuff
##  150907 etxtory   Updated to com ea spi 1.6
##  150910 etxtory   localhost cannot be used
##  150923 etxarnu   SNMPD_OPTIONS updated (TR HT99866)
##                   to exclude ifTable
##  151106 etxarnu   is_pid_running verifies it is snmpd
##  151110 etxarnu   TR HU34291: SNMPD_OPTIONS updated
##  160114 etxlg     Enabled for IPv6, agentaddress discarded
##  160126 etxarnu   Removed /usr/local/bin/comea-snmp usage
##  160212 etxlg     Fix TR HU57495
##  160217 etxarnu   added flock
##  160308 etxarnu   Set lockfile from 'configure' to 'start'
##  160608 etxarnu   Bug in conf_ipv6 setting
##                   Removed flock
##  170712 enatdok   Added support for snmpd trust category
##  170807 estjako   Added support for snmpd node credential
##  170809 ekurnik   Added support for snmpd agentAddressDtls + path to /tmp
##  170811 ekurnik   Check snmp start only on udp (without dtls)
##  170815 estjako   Support for dtlsUser
##  170817 enatdok   Finished design for dtlsUser
##  171009 eivmiha   Removed snmp dtls support
##  171018 enatdok   Fix TR HW36986
##  
## NOTE:
## comea-snmp is a sudo-script to be able to handle port 161.
## Target environment - delivered by RCSEE
## Simulated environment - delivered by RCSMW
##
## For debug of SNMP (replace SNMPD_LOGGING below):
## SNMPD_LOG="${COMEA_CONF_DIR}/log/snmpd.log"
## SNMPD_LOGGING="-LS5d -Dtrap -Lf $SNMPD_LOG"
##
## For debug of script (etxarnu)
##    exec >> /tmp/comea-snmp_$USER.log 2>&1
#####################################################
# RCS addings: start
# LOCKFILE is used to stop appm calling when script ongoing
LOCKFILE=${COMEA_ROOT_DIR}/comea-snmp.lock
LOGFILE=${COMEA_ROOT_DIR}/log/comea-snmp.log

## For debug of script (etxarnu)
#Date=$( date +%X.%N )
#set -x
#exec >> $LOGFILE 2>&1
#echo "=================== $Date $@ ==============" >> $LOGFILE

SELF_NAME=`basename $0`
# it happens that the oam_net_namespace file exists but is empty
# this is an error, but possibly unavoidable due to race
ThisFile=$(readlink -f $0)
if [ -r /home/sirpa/oam_net_namespace -a -z "$OAM_NET_NS" ]; then
    export OAM_NET_NS=$(</home/sirpa/oam_net_namespace)
    if [ -n "${OAM_NET_NS}" -a -f /run/netns/${OAM_NET_NS} ]; then
       exec ip netns exec ${OAM_NET_NS} ${ThisFile} $@
    else
       echo "$SELF_NAME error: NET_NS ${OAM_NET_NS:-empty_file} does not exist" >&2
       logger "[ERROR ${SELF_NAME}] NET_NS ${OAM_NET_NS:-empty_file} does not exist"
    fi
fi

if [ $ThisFile == "/usr/local/bin/comea-snmp" ]; then
    # sudo -E is not passing env variabled and therefore
    # comea calls comea-snmp with the needed environment
    # variables. The 4*shift below is done to avoid changes
    # in the rest of comea-snmp.
    # Arg 1: $PATH
    # Arg 2: $COMEA_ROOT_DIR
    # Arg 3: $COMEA_CONF_DIR
    # Arg 4: $SNMPD_CONF
    export PATH=$1;
    export COMEA_ROOT_DIR=$2;
    export COMEA_CONF_DIR=$3;
    export SNMPD_CONF=$(echo $1 | sed '0,/\\/s/\\/\//')
    shift; shift; shift;shift;
fi
# RCS addings: stop


unset LD_PRELOAD

# double-check for comea root folder
if [ ! -d "${COMEA_ROOT_DIR}" ]; then
    COMEA_ROOT_DIR="/opt/com/comea"
fi

# double-check for comea etc folder
if [ ! -f "${SNMPD_CONF}" ]; then
    COMEA_CONF_DIR=`${COMEA_ROOT_DIR}/bin/comea pso config`
    if [ $? -eq 0 ] && [ -e "${COMEA_CONF_DIR}" ]; then
        SNMPD_CONF="${COMEA_CONF_DIR}/etc/snmp/snmpd.conf"
    else
        COMEA_CONF_DIR="/home/com"
        SNMPD_CONF="${COMEA_CONF_DIR}/etc/snmp/snmpd.conf"
        if [ ! -e "${SNMPD_CONF}" ]; then
            COMEA_CONF_DIR="${COMEA_ROOT_DIR}"
            SNMPD_CONF="${COMEA_CONF_DIR}/etc/snmpd.conf"
        fi
    fi
else
  # set COMEA_CONF_DIR!
  COMEA_CONF_DIR="`dirname ${SNMPD_CONF}`"
  COMEA_CONF_DIR="`dirname ${COMEA_CONF_DIR}`"
fi

if [ -z "${SNMPCONFPATH}" ]; then
  # Certificates exist under tls/certs/*.crt && tls/private/*.key
  COMEA_NOBACKUP_DIR=`${COMEA_ROOT_DIR}/bin/comea pso no-backup`
  if [ $? -eq 0 ] && [ -e "${COMEA_NOBACKUP_DIR}" ]; then
    SNMPCONFPATH="${COMEA_CONF_DIR}/etc/snmp/:${COMEA_NOBACKUP_DIR}/etc/snmp/:${COMEA_ROOT_DIR}/etc/snmp/" export SNMPCONFPATH
  else
    SNMPCONFPATH="${COMEA_CONF_DIR}/etc/snmp/:${COMEA_ROOT_DIR}/etc/snmp/" export SNMPCONFPATH
  fi
fi

# set get cmd depending on env
if [ ! -d "${NETSNMP_ROOT}" ]; then
    NETSNMP_ROOT="/usr"
else
    if [ -d "${NETSNMP_ROOT}/lib64" ]; then
        LD_LIBRARY_PATH="${NETSNMP_ROOT}/lib64:$LD_LIBRARY_PATH" export LD_LIBRARY_PATH
    elif [ -d "${NETSNMP_ROOT}/lib" ]; then
        LD_LIBRARY_PATH="${NETSNMP_ROOT}/lib:$LD_LIBRARY_PATH" export LD_LIBRARY_PATH
    fi
fi
SNMP_GET_CMD="${NETSNMP_ROOT}/bin/snmpget"
SNMPD_CMD="${NETSNMP_ROOT}/sbin/snmpd"

# set output flag to true if not testing
if [ "${COMEA_MSG_OUT}" != "false" ]; then
    COMEA_MSG_OUT="true"
fi

SNMPD_PID="${COMEA_ROOT_DIR}/run/snmpd.pid"
SNMPD_PWDF="${COMEA_ROOT_DIR}/run/snmpPwdFile"
TMP_COMMUNITY_STR="${COMEA_ROOT_DIR}/txt"
SNMPD_LOGGING="-LS5d"

SNMP_PERSISTENT_DIR=${COMEA_ROOT_DIR}/run export SNMP_PERSISTENT_DIR

if [ ! -e ${SNMP_PERSISTENT_DIR} ]; then
    mkdir ${SNMP_PERSISTENT_DIR}
    chmod 777 ${SNMP_PERSISTENT_DIR}
fi


error() {
    trap - INT TERM EXIT
    echo "$SELF_NAME error: $1" >&2
    logger "[ERROR ${SELF_NAME}] $1"
}

test -x "$SNMPD_CMD" || (error "snmp is not installed" && exit 1)
test -x "$SNMP_GET_CMD" || (error "snmp is not installed" && exit 1)

set_agentxsocket() {
    sed -i -e 's:\(agentxsocket \).*\($\):\1'$COMEA_ROOT_DIR'/run/agentx-socket\2:' \
        $SNMPD_CONF
}

generate_new_pwd() {
    # generate random password and redirect it to snmpPwdFile
    PASSWD="`dd if=/dev/urandom bs=1 count=32 | md5sum | tr -d [:space:]-`"
    echo "$PASSWD" > $SNMPD_PWDF
    ls -l $SNMPD_PWDF
    # update snmpd configuration file as well
    sed -i "s/\(createUser[ ]*com_[^ ]*[ ]*[^ ]*[ ]*\)[0-9a-zA-Z]*\([ ]*[^ ]*\)/\1$PASSWD\2/" \
        $SNMPD_CONF
}

is_pid_running() {
    # if the pid file exist
    if [ -f "$SNMPD_PID" ]; then
        # if the process in the pid file exist
    SPID=`cat $SNMPD_PID`
        if /bin/kill -0 $SPID > /dev/null
        then
            # if the process is snmpd
            SNAME=`ps -p $SPID -o comm | tail -1`
            if [ $SNAME == "snmpd" ]; then
                return 0 # NOTE: ZERO means success in bash
            else
            # remove incorrect pid file
                rm -f "$SNMPD_PID"
            return 1
            fi
        fi
    fi
    return 1
}

waitPid(){
    PID_l=$1
    COUNT=20
    while [ $COUNT -gt 0 ]; do
        if /bin/kill -0 $PID_l > /dev/null 2>&1
        then
            usleep 100000
            COUNT=`expr $COUNT - 1`
        else
            break
        fi
    done
}

get_snmp_pids() {
    res=""
    pids=`pidof ${SNMPD_CMD}`
    for pid in ${pids}
    do
        grep ${SNMPD_CONF} /proc/${pid}/cmdline > /dev/null && res="${pid} ${res}"
    done
    echo ${res}
}

stop() {
    # no pid file => not running
    if [ -f "$SNMPD_PID" ]; then
        PID_l=`cat $SNMPD_PID`

        # send terminate signal by default
        # Fix for TR HP97091 to also work on LDE/redhat. (Not tested on all redhat distributions)
        if [ -f /etc/redhat-release ]; then
            # source function library
            . /etc/init.d/functions
            killproc -p $SNMPD_PID $SNMPD_CMD
        elif [ -x /sbin/start-stop-daemon ]; then
            start-stop-daemon --quiet --stop --oknodo --pidfile $SNMPD_PID --exec $SNMPD_CMD
        else
            /bin/kill -15 $PID_l
        fi

        # wait for process to stop
        waitPid $PID_l

        # if still alive try to kill
        if is_pid_running ; then
            /bin/kill -9 $PID_l || true
        fi
    fi

    # double-check for pids with the same config file
    ALL_SNMPD_PIDS=`get_snmp_pids`
    if [ ! -z "${ALL_SNMPD_PIDS}" ]; then
        if [ ! -f "$SNMPD_PID" ]; then
            PID_l=`echo "${ALL_SNMPD_PIDS}" | cut -d' ' -f 1`
            echo "$PID_l" > $SNMPD_PID
        fi
        /bin/kill -9 `echo ${ALL_SNMPD_PIDS}` || true
    fi
    # triple-check and clean-up
    usleep 100000
    is_pid_running
    if [ $? -ne 0 ]; then
        if [ -f "$SNMPD_PID" ]; then
            rm -rf $SNMPD_PID
        fi
        if [ -e "$COMEA_ROOT_DIR/run/agentx-socket" ]; then
            rm -rf $COMEA_ROOT_DIR/run/agentx-socket
        fi
        if [ -e "$COMEA_ROOT_DIR/run/snmpPwdFile" ]; then
            rm -rf $COMEA_ROOT_DIR/run/snmpPwdFile
        fi
        return 0
    fi
    if [ "$PID_l" == "" ]; then
        return 0
    else
    # even if after kill pid is running, report an error
        error "failed to stop snmp daemon, still running on pid $PID_l"
        return 1
    fi
}

start() {
    trap forcestop INT TERM EXIT
    # clean-up just in case
    stop
    # check agentx socket and password
    set_agentxsocket
    generate_new_pwd

    # Fix for TR HP97091 to also work on LDE/redhat. (Not tested on all redhat distributions)
    # RCS addition: exclude most mibs
    SNMPD_OPTIONS=" \
        -I -system_mib \
        -I -at\
        -I -icmp \
        -I -udp \
        -I -udpTable \
        -I -udpEndpointTable \
        -I -ifTable \
        -I -tcp \
        -I -tcpListenerTable \
        -I -tcpConnectionTable \
        -I -tcpTable \
        -I -sysORTable \
        -I -ip \
        -I -ipIfStatsTable \
        -I -ip_scalars \
        -I -ipCidrRouteTable \
        -I -inetCidrRouteTable \
        -I -ipDefaultRouterTable \
        -I -ipSystemStatsTable\
        -I -ipAddressTable\
        -I -ipAddressPrefixTable\
        -I -inetNetToMediaTable\
        -I -notification_log \
        -I -hrSWRunTable  \
        -I -hrSWRunPerfTable  \
        -I -hrSWInstalledTable \
        -I -hr_system \
        -I -hr_disk \
        -I -hr_proc \
        -I -hr_device \
        -I -hr_partition \
        -I -hrh_storage \
        -I -hrh_filesys \
        -I -mteObjects -I -mteObjectsTable -I -mteObjectsConf \
        -I -mteEvent -I -mteEventConf -I -mteScalars \
        -C -c $SNMPD_CONF $SNMPD_LOGGING -p $SNMPD_PID"
    # end RCS addition: exclude most mibs

    if [ -f /etc/redhat-release ]; then
        # source function library
        . /etc/init.d/functions
        daemon --pidfile $SNMPD_PID $SNMPD_CMD $SNMPD_OPTIONS
    elif [ -x /sbin/start-stop-daemon ]; then
        start-stop-daemon --quiet --start --oknodo --pidfile $SNMPD_PID \
            --exec $SNMPD_CMD -- $SNMPD_OPTIONS
    else
        $SNMPD_CMD $SNMPD_OPTIONS &
    fi

    PWD=`cat $SNMPD_PWDF`
    CARRIER=`sed -n 's/agentaddress \([^:]*\):\(.*\)$/\1/ p' $SNMPD_CONF`
    if [ "$CARRIER" = "udp6" ]; then
        PORT=`sed -n 's/agentaddress \([^:]*\):\[\(.*\)\]:\(.*\)/\3/ p' $SNMPD_CONF`
    else
        PORT=`sed -n 's/agentaddress \([^:]*\):\([^:]*\):\([0-9]*\)\(.*\)/\3/ p' $SNMPD_CONF`
    fi

    if [ "$CARRIER" = "udp6" ]; then
        HOST='udp6:[::1]'
    else
        HOST="localhost"
    fi

    # try snmpget until master agent answers successfully
    AGENT=`sed -n 's/agentaddress \([^:]*\):\([^:]*\):\([0-9]*\)\(.*\)/\1:\2:\3/ p' $SNMPD_CONF` # RCS add (localhost is not used)
    COUNT=100 # 20 sec
    while [ $COUNT -gt 0 ]
    do
        if is_pid_running; then
            # check for snmpEngineBoot variable
            if $SNMP_GET_CMD --defSecurityModel=usm -v 3 -u com_config_user -l authPriv -a MD5 -A $PWD -x DES -X $PWD \
                       "$AGENT" 1.3.6.1.6.3.10.2.1.2.0 > /dev/null   # RCS changed
            then
                # hold a bit and break the loop
                usleep 200000
                break
            fi
        fi
        usleep 100000
        COUNT=`expr $COUNT - 1`

    done
    # double-check
    if [ $COUNT -eq 0 ]; then
        error "failed to start snmp daemon"
        return 1
    fi
    # triple-check
    is_pid_running
    if [ $? -ne 0 ]; then
        error "failed to start snmp daemon"
        return 1
    fi
    trap - INT TERM EXIT
    # the daemon is checked and held-on a bit
    return 0
}

forcestop(){
    if [ ! -f "$SNMPD_PID" ]; then
        return 0
    fi
    PID=`cat $SNMPD_PID`
    /bin/kill -9 $PID
    return 1
}

restart() {
    stop
    start
}

status() {
    if is_pid_running > /dev/null
    then
        echo "$NAME status: running on pid `cat $SNMPD_PID`"
    else
        echo "${NAME} status: not running"
    fi
    return 0
}

# build an integer version number
make_int_version()
{
    local multiplier=1000000000
    local version=0
    local parts="`echo $1 | tr -c -d '0-9.' | sed 's/\./ /g'`"

    for i in $parts ; do
        temp=`expr $multiplier \* $i`
        version=`expr $version + $temp`
        multiplier=`expr $multiplier / 1000`
    done

    echo $version
}

version_is_greater()
{
    local version1=`make_int_version $1`
    local version2=`make_int_version $2`

    if [ $version1 -gt $version2 ]; then
        return 0
    fi

    return 1
}


is_dtls_supported(){
    if [ ! -x "$SNMPD_CMD" ]; then
        echo "no ($SNMPD_CMD not executable)"
        return 0
    fi

    ROW="`$SNMPD_CMD -H 2>&1 | grep localCert`"
    if [ -z "$ROW" ]; then
        echo "no (localCert support is missing)"
        return 0
    fi

    echo "yes"
    return 0
}

configure() {
        noOfVar=$#

        if [ $noOfVar -eq 2 ]; then
            error "argument must be specified"
            echo "usage: comea snmp configure agentAddress <address> community <communities>"
            exit 1
        fi

        while [ $noOfVar -ge 3 ]; do
            case $3 in
            "agentAddress"*)
                #RCS change, listener(s) partly hardcoded
                conf_ipv6=""
                conf_ipv6_dtls=""
                OAP_IPV6_FILE=${COMEA_ROOT_DIR}/oap_ipv6_addr.conf
                if [ -f $OAP_IPV6_FILE ]; then
                    conf_ipv6="`cat $OAP_IPV6_FILE`"
                    conf_ipv6_dtls=`cat $OAP_IPV6_FILE | sed 's/,udp6/,dtlsudp6/'`
                fi
                
                function join_by { local IFS="$1"; shift; echo "$*"; }
                IFS=', ' read -r -a array <<< "$4"
                CONFIG=()
                
                for element in "${array[@]}"
                do
                     protocol=`echo "$element" | awk -F '[:]' '{print $1}'`
                     port=`echo "$element" | awk -F '[:]' '{print $NF}'`
                     
                     if [ "$protocol" = "udp" -o "$protocol" = "udp6" ]; then
                     # udp
                         conf_a="udp:0.0.0.0:${port},udp6:[::]:${port}"
                         if [ -n "${conf_ipv6}" ]; then
                             conf_a="${conf_a}${conf_ipv6}:${port}"
                         fi

                         CONFIG+=("$conf_a")
                    else
                    # dtls
                        conf_a="dtlsudp:0.0.0.0:${port},dtlsudp6:[::]:${port}"
                        if [ -n "${conf_ipv6_dtls}" ]; then
                            conf_a="${conf_a}${conf_ipv6_dtls}:${port}"
                        fi

                        CONFIG+=("$conf_a")
                     fi
                done

                OUTPUT=`join_by , "${CONFIG[@]}"`
                sed -i -e 's/agentaddress.*\($\)/agentaddress '"$OUTPUT"'\1/' "$SNMPD_CONF"

                #args shouldn't be matched against operations
                noOfVar=`expr $noOfVar - 1`
                shift
                ;;
            "dtlsNodeCredential"*)
                FINGERPRINT="$4"
                BEGIN="#tls:config:begin"
                END="#tls:config:end"

                TMPFILE="`mktemp`"

                if [ -z $FINGERPRINT ]; then
                    echo > $TMPFILE
                else
                    echo "[snmp] localCert $FINGERPRINT" > $TMPFILE
                fi

                # Delete any existing tls rows
                SED_COMMAND1="/${BEGIN}/,/${END}/ c ${BEGIN}\n${END}"
                sed -i "$SED_COMMAND1" $SNMPD_CONF

                # Find insert point for tls region and insert
                SED_COMMAND2="/${BEGIN}/ {r $TMPFILE
                }"
                sed -i "$SED_COMMAND2" $SNMPD_CONF

                rm -f "$TMPFILE"

                # args shouldn't be matched against operations
                noOfVar=`expr $noOfVar - 1`
                shift
                ;;
            "setCipherString"*)
                BEGIN="#tls:filter:begin"
                END="#tls:filter:end"

                TMPFILE="`mktemp`"

                printf "$4" >> $TMPFILE
                CIPHERSTRING="`cat $TMPFILE | base64 --decode`"

                if [ -z $CIPHERSTRING ]; then
                   sed -i "/$BEGIN/,/$END/ c$BEGIN\n$END" $SNMPD_CONF
                else
                   sed -i "/$BEGIN/,/$END/ c$BEGIN\n\[snmp\] tlsAlgorithms  $CIPHERSTRING\n$END" $SNMPD_CONF
                fi

                rm -f "$TMPFILE"
                # args shouldn't be matched against operations
                noOfVar=`expr $noOfVar - 1`
                shift
                ;;
            "community"*)
                udp6=0
                # Check for ipv6, i.e. udp6, if: set flag to true
                if [ `grep -e 'udp6' $SNMPD_CONF | wc -l` -ne 0 ] ; then
                    udp6=1
                fi

                BEGIN="com2sec:values:begin"
                END="com2sec:values:end"
                MARKER="#com2sec:values:begin:end"

                TMPFILE="`mktemp`"

                for i in `echo $4 | tr "," "\n"`; do
                    COMMUNITY="`echo "${i}" | base64 --decode`"

                    if [ ${udp6} -gt 0 ] ; then
                        #RCS added this line we want both IPv4 and IPv6
                        echo "com2sec 'Com_$COMMUNITY' default '$COMMUNITY'" >> $TMPFILE
                        echo "com2sec6 'Com_$COMMUNITY' default '$COMMUNITY'" >> $TMPFILE
                    else
                        echo "com2sec 'Com_$COMMUNITY' default '$COMMUNITY'" >> $TMPFILE
                    fi
                done

                # Delete any existing com2sec rows
                SED_COMMAND1="/\W*#\W*${BEGIN}/,/\W*#\W*${END}/ c # ${BEGIN}\n\n${MARKER}\n\n# ${END}"
                sed -i "$SED_COMMAND1" $SNMPD_CONF

                # Find insert point for com2sec region and insert
                SED_COMMAND2="/${MARKER}/ {r $TMPFILE
                }"
                sed -i "$SED_COMMAND2" $SNMPD_CONF

                # Delete insert point
                SED_COMMAND3="/${MARKER}/d"
                sed -i "$SED_COMMAND3" $SNMPD_CONF

                rm -f "$TMPFILE"

                # args shouldn't be matched against operations
                noOfVar=`expr $noOfVar - 1`
                shift
                ;;
                "trapsess"*)
                BEGIN="#inform:config:begin"
                END="#inform:config:end"

                TMPFILE="${4}"

                # Delete any existing rows
                SED_COMMAND1="/${BEGIN}/,/${END}/ c ${BEGIN}\n${END}"
                sed -i "$SED_COMMAND1" $SNMPD_CONF

                # Find insert point and insert
                SED_COMMAND2="/${BEGIN}/ {r $TMPFILE
                }"
                sed -i "$SED_COMMAND2" $SNMPD_CONF

                rm -f "$TMPFILE"

                # args shouldn't be matched against operations
                noOfVar=`expr $noOfVar - 1`
                shift
                ;;
            *)
                error "unknown argument"
                echo $3
                exit 1
                ;;
            esac
            noOfVar=`expr $noOfVar - 1`
            shift
        done
    # restart
}

logger "com-comea-snmp: $@"
case $2 in
    "start")
        start
        # RCS addition
        logger "com-comea-snmp: snmp start ready"
        ;;
    "stop")
        stop
        ;;
    "restart")
        restart
        ;;
    "status")
        status
        ;;
    "configure")
        # RCS addition
        configure $@
        ;;
    "terminate")
        stop
        ;;
    "isDtlsSupported")
        is_dtls_supported
        ;;
    "")
        error "sub-command must be specified"
        echo "usage: $NAME snmp [start|stop|restart|status|configure]"
        exit 1
        ;;
    *)
        error "unknown command"
        exit 1
        ;;
esac
[ -e  $LOCKFILE ] && rm $LOCKFILE
exit 0

