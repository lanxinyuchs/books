%%% --------------------------------------------------------
%%% Copyright (c) Ericsson AB 2017 All rights reserved.
%%%
%%% The information in this document is the property of Ericsson.
%%%
%%% Except as specifically authorized in writing by Ericsson, the
%%% receiver of this document shall keep the information contained
%%% herein confidential and shall protect the same in whole or in
%%% part from disclosure and dissemination to third parties.
%%%
%%% Disclosure and disseminations to the receivers employees shall
%%% only be made on a strict need to know basis.
%%% --------------------------------------------------------

-hrl_id({"RcsPMEventM","1.0.1","/main/R3A/R10A/1"}).


%% -------------- CLASS PmEventM -------------------------

%% Description:
%% The Performance Management (PM) Event Management fragment.

-record(pmEventM, {pmEventMId,
                   dummy}).

-define(pmEventM_types,
        [{pmEventMId, string},
         {dummy, atom}]).

-define(PmEventM_restricted, [pmEventMId]).


%% -------------- CLASS EventType -------------------------

%% Description:
%% Defines the event type that can be generated by the Managed Element.

-record(eventType, {eventTypeId,
                    triggerDescription}).

-define(eventType_types,
        [{eventTypeId, string},
         {triggerDescription, string}]).

-define(EventType_restricted, [eventTypeId]).


%% -------------- CLASS EventJob -------------------------

%% Description:
%% Defines the information to be used to activate and configure an event job on the Managed Element.

-record(eventJob, {eventJobId,
                   description,
                   eventFilter,
                   requestedJobState,
                   currentJobState,
                   fileOutputEnabled,
                   streamDestinationIpAddress,
                   streamDestinationPort,
                   reportingPeriod,
                   streamOutputEnabled,
                   jobControl,
                   eventGroupRef,
                   eventTypeRef,
                   fileCompressionType,
                   streamCompressionType}).

-define(eventJob_types,
        [{eventJobId, string},
         {description, string},
         {eventFilter, {sequence,{struct,'EventFilter'}}},
         {requestedJobState, 'RcsPMEventM.JobState'},
         {currentJobState, 'RcsPMEventM.SessionState'},
         {fileOutputEnabled, boolean},
         {streamDestinationIpAddress, 'RcsPMEventM.IpDNSAddress'},
         {streamDestinationPort, uint16},
         {reportingPeriod, 'RcsPMEventM.TimePeriod'},
         {streamOutputEnabled, boolean},
         {jobControl, 'RcsPMEventM.JobControl'},
         {eventGroupRef, {sequence,moRef}},
         {eventTypeRef, {sequence,moRef}},
         {fileCompressionType, 'RcsPMEventM.CompressionTypes'},
         {streamCompressionType, 'RcsPMEventM.CompressionTypes'}]).

-define(eventJob_requestedJobState_default, 'ACTIVE').
-define(eventJob_jobControl_default, 'FULL').
-define(EventJob_restricted, [eventJobId]).


%% -------------- CLASS EventGroup -------------------------

%% Description:
%% Represents a group of related Event Types.

-record(eventGroup, {eventGroupId,
                     description,
                     moClass,
                     eventGroupVersion,
                     validFilters}).

-define(eventGroup_types,
        [{eventGroupId, string},
         {description, string},
         {moClass, {struct,'ManagedObjectClass'}},
         {eventGroupVersion, string},
         {validFilters, {sequence,moRef}}]).

-define(EventGroup_restricted, [eventGroupId]).


%% -------------- CLASS StreamingCapabilities -------------------------

%% Description:
%% Streaming capabilities.

-record(streamingCapabilities, {streamCapabilitiesId,
                                supportedCompressionTypes}).

-define(streamingCapabilities_types,
        [{streamCapabilitiesId, string},
         {supportedCompressionTypes, {sequence,'RcsPMEventM.CompressionTypes'}}]).

-define(StreamingCapabilities_restricted, [streamCapabilitiesId]).


%% -------------- CLASS FilePullCapabilities -------------------------

%% Description:
%% Event capabilities specific to file pull.

-record(filePullCapabilities, {filePullCapabilitiesId,
                               supportedReportingPeriods,
                               outputDirectory,
                               alignedReportingPeriod,
                               supportedCompressionTypes,
                               finalROP}).

-define(filePullCapabilities_types,
        [{filePullCapabilitiesId, string},
         {supportedReportingPeriods, {sequence,'RcsPMEventM.TimePeriod'}},
         {outputDirectory, string},
         {alignedReportingPeriod, boolean},
         {supportedCompressionTypes, {sequence,'RcsPMEventM.CompressionTypes'}},
         {finalROP, boolean}]).

-define(filePullCapabilities_alignedReportingPeriod_default, true).
-define(filePullCapabilities_finalROP_default, false).
-define(FilePullCapabilities_restricted, [filePullCapabilitiesId]).


%% -------------- CLASS EventCapabilities -------------------------

%% Description:
%% Event capabilities.

-record(eventCapabilities, {eventCapabilitiesId,
                            maxNoOfJobs}).

-define(eventCapabilities_types,
        [{eventCapabilitiesId, string},
         {maxNoOfJobs, uint16}]).

-define(EventCapabilities_restricted, [eventCapabilitiesId]).


%% -------------- CLASS EventFilterType -------------------------

%% Description:
%% Describes the available Event Filter Type definitions.

-record(eventFilterType, {eventFilterTypeId,
                          description,
                          filterMethod,
                          valueSpec,
                          defaultValue}).

-define(eventFilterType_types,
        [{eventFilterTypeId, string},
         {description, string},
         {filterMethod, 'RcsPMEventM.FilterMethod'},
         {valueSpec, string},
         {defaultValue, string}]).

-define(EventFilterType_restricted, [eventFilterTypeId]).


%% -------------- CLASS EventProducer -------------------------

%% Description:
%% Event Producer.

-record(eventProducer, {eventProducerId,
                        dummy}).

-define(eventProducer_types,
        [{eventProducerId, string},
         {dummy, atom}]).

-define(EventProducer_restricted, [eventProducerId]).


%% ------------------ ENUM JobControl ----------------------
-ifndef('JobControl').
-define('JobControl', 1).

-define(JobControl_FULL, 0).
-define(JobControl_STARTSTOP, 1).
-define(JobControl_VIEWONLY, 2).

-endif. % JobControl

%% ------------------ ENUM FilterMethod ----------------------
-ifndef('FilterMethod').
-define('FilterMethod', 1).

-define(FilterMethod_SINGLE_SELECT, 0).
-define(FilterMethod_MULTI_SELECT, 1).
-define(FilterMethod_INTERVAL, 2).
-define(FilterMethod_DISTINGUISHED_NAMES, 3).
-define(FilterMethod_REGEXP, 4).

-endif. % FilterMethod

%% ------------------ ENUM JobState ----------------------
-ifndef('JobState').
-define('JobState', 1).

-define(JobState_ACTIVE, 1).
-define(JobState_STOPPED, 2).

-endif. % JobState

%% ------------------ ENUM CompressionTypes ----------------------
-ifndef('CompressionTypes').
-define('CompressionTypes', 1).

-define(CompressionTypes_GZIP, 0).

-endif. % CompressionTypes

%% ------------------ ENUM TimePeriod ----------------------
-ifndef('TimePeriod').
-define('TimePeriod', 1).

-define(TimePeriod_ONE_MIN, 3).
-define(TimePeriod_FIVE_MIN, 4).
-define(TimePeriod_FIFTEEN_MIN, 5).
-define(TimePeriod_THIRTY_MIN, 6).
-define(TimePeriod_ONE_HOUR, 7).
-define(TimePeriod_TWELVE_HOUR, 8).
-define(TimePeriod_ONE_DAY, 9).
-define(TimePeriod_TEN_SECONDS, 1).
-define(TimePeriod_THIRTY_SECONDS, 2).

-endif. % TimePeriod

%% ------------------ ENUM SessionState ----------------------
-ifndef('SessionState').
-define('SessionState', 1).

-define(SessionState_ACTIVATING, 0).
-define(SessionState_ACTIVE, 1).
-define(SessionState_DEACTIVATING, 3).
-define(SessionState_STOPPED, 2).
-define(SessionState_FAILED, 4).

-endif. % SessionState

%% ------------------ STRUCT EventFilter ----------------------
-ifndef(_EVENT_FILTER).
-define(_EVENT_FILTER, 1).

-record('EventFilter', {filterName,
                        filterValue}).

-define('EventFilter_types',
        [{filterName, string},
         {filterValue, string}]).


-endif. % _EVENT_FILTER


%% ------------------ STRUCT ManagedObjectClass ----------------------
-ifndef(_MANAGED_OBJECT_CLASS).
-define(_MANAGED_OBJECT_CLASS, 1).

-record('ManagedObjectClass', {moClassName,
                               mimName}).

-define('ManagedObjectClass_types',
        [{moClassName, string},
         {mimName, string}]).


-endif. % _MANAGED_OBJECT_CLASS

