//----------------------------------------------------------------------
//
// %EricssonCopyright%
// %CopyrightBegin%
//
// Copyright Ericsson AB 2012-2013. All Rights Reserved.
//
// The program may be used and/or copied only with the written permission from
// Ericsson AB, or in accordance with the terms and conditions stipulated in
// the agreement/contract under which the program has been supplied.
//
// %CopyrightEnd%
//
//--------------------------------------------------------------------
import "sa_ais.proto";
import "ntf.proto";

// Types

// 3.4.1
// typedef SaUint64T SaLogHandleT;
// typedef SaUint64T SaLogStreamHandleT;

// 3.4.2
// 3.4.2.1
// #define SA_LOG_STREAM_SYSTEM "safLgStr=saLogSystem"
// #define SA_LOG_STREAM_NOTIFICATION "safLgStr=saLogNotification"
// #define SA_LOG_STREAM_ALARM "safLgStr=saLogAlarm"
// 3.4.2.2
//typedef SaUint16T SaLogSeverityT;
// #define SA_LOG_SEV_EMERGENCY 0
// #define SA_LOG_SEV_ALERT 1
// #define SA_LOG_SEV_CRITICAL 2
// #define SA_LOG_SEV_ERROR 3
// #define SA_LOG_SEV_WARNING 4
// #define SA_LOG_SEV_NOTICE 5
// #define SA_LOG_SEV_INFO 6

enum safsLogSeverity {
     sa_log_sev_emergency = 0;
     sa_log_sev_alert     = 1;
     sa_log_sev_critical  = 2;
     sa_log_sev_error     = 3;
     sa_log_sev_warning   = 4;
     sa_log_sev_notice    = 5;
     sa_log_sev_info      = 6;
}

//typedef SaUint16T SaLogSeverityFlagsT;
// #define SA_LOG_SEV_FLAG_EMERGENCY 0x0001
// #define SA_LOG_SEV_FLAG_ALERT 0x0002
// #define SA_LOG_SEV_FLAG_CRITICAL 0x0004
// #define SA_LOG_SEV_FLAG_ERROR 0x0008
// #define SA_LOG_SEV_FLAG_WARNING 0x0010
// #define SA_LOG_SEV_FLAG_NOTICE 0x0020
// #define SA_LOG_SEV_FLAG_INFO 0x0040

message safsLogSeverityFlags {
  required bool saLogSevFlagEmergency = 1;
  required bool saLogSevFlagAlert     = 2;
  required bool saLogSevFlagCritical  = 3;
  required bool saLogSevFlagError     = 4;
  required bool saLogSevFlagWarning   = 5;
  required bool saLogSevFlagNotice    = 6;
  required bool saLogSevFlagInfo      = 7;
}

// 3.4.2.3
//typedef struct{
//    SaSizeT logBufSize;
//    SaUint8T *logBuf;
//} SaLogBufferT;
// 3.4.2.4
// #define SA_LOG_RECORD_WRITE_ACK 0x1
//typedef SaUint32T SaLogAckFlagsT;
enum safsLogAckFlags {
     sa_log_record_write_ack = 1;
}

// 3.4.2.5
// #define SA_LOG_STREAM_CREATE 0x1
//typedef SaUint8T SaLogStreamOpenFlagsT;
enum safsLogStreamOpenFlags {
     sa_log_stream_create = 1;
}

//3.4.3
//3.4.4
//3.4.4.1
enum safsLogNtfIdentifiers {
     sa_log_ntf_logfile_percent_full = 1;
}

//3.4.4.2
enum safsLogNtfAttributes {
     sa_log_ntf_attr_log_stream_name   = 1;
     sa_log_ntf_attr_logfile_name      = 2;
     sa_log_ntf_attr_logfile_path_name = 3;
}

//3.4.5
//3.4.5.1
enum safsLogHeaderType {
     sa_log_ntf_header     = 1;
     sa_log_generic_header = 2;
}

//3.4.5.2
message safsLogNtfLogHeader {
  required uint64           notificationId      = 1;
  required safsNtfEventType eventType           = 2;
  required string           notificationObject  = 3;
  required string           notifyingObject     = 4;
  optional safsNtfClassId   notificationClassId = 5;
  required uint64           eventTime           = 6;
} 

//3.4.5.3
message safsLogGenericLogHeader {
  optional safsNtfClassId  notificationClassId = 1;
  required string          logSvcUsrName       = 2;
  required safsLogSeverity logSeverity         = 3;
}

//3.4.5.4
message safsLogHeader {
  // One of the following will be filled in.
  optional safsLogNtfLogHeader     ntfHdr     = 1;
  optional safsLogGenericLogHeader genericHdr = 2;
}

//3.4.5.5
message safsLogRecord {
  required uint64            logTimeStamp = 1;
  required safsLogHeaderType logHdrType   = 2;
  required safsLogHeader     logHeader    = 3;
  optional string            logBuffer    = 4;
}

//3.4.6
//3.4.6.1
enum safsLogFileFullAction {
     sa_log_file_full_action_wrap   = 1;
     sa_log_file_full_action_halt   = 2;
     sa_log_file_full_action_rotate = 3;
}
//3.4.6.2
message safsLogFileCreateAttributes_2 {
  required string                logFileName       = 1;
  optional string                logFilePathName   = 2;
  required uint64                maxLogFileSize    = 3;
  required uint32                maxLogRecordSize  = 4;
  required bool                  haProperty        = 5;
  required safsLogFileFullAction logFileFullAction = 6;
  optional uint32                maxFilesRotated   = 7;
  optional string                logFileFmt        = 8;
}

//3.4.7
message safsLogCallbacks {
  required bool saLogFilterSetCallback  = 1;
  required bool saLogStreamOpenCallback = 2;
  required bool saLogWriteLogCallback   = 3;
}

//3.4.8
enum safsLogLimitId {
     sa_log_max_num_cluster_app_log_streams_id = 1;
}

//3.5

//Library life cycle
//3.5.1
message safsLogInitialize {
  optional safsLogCallbacks callbacks = 1;
  optional safsVersion      version   = 2;
} // out parameters in result

//3.5.2
//3.5.3
//3.5.4
message safsLogFinalize {
  required uint64 handle = 1;
}

//3.6

//Log Service Operations
//3.6.1
message safsLogStreamOpen_2 {
  required uint64                        handle                  = 1;
  required string                        logStreamName           = 2;
  optional safsLogFileCreateAttributes_2 logFileCreateAttributes = 3;
  optional safsLogStreamOpenFlags        logStreamOpenFlags      = 4;
  optional uint64                        timeout                 = 5;
}

message safsLogStreamOpenAsync_2 {
  required uint64                        handle                  = 1;
  required string                        logStreamName           = 2;
  optional safsLogFileCreateAttributes_2 logFileCreateAttributes = 3;
  optional safsLogStreamOpenFlags        logStreamOpenFlags      = 4;
  required uint64                        invocation              = 5;
}

//3.6.2
message saLogStreamOpenCallback {
  required uint64       invocation      = 1;
  required uint64       logStreamHandle = 2;
  required safsAisError error           = 3;
}

//3.6.3
message safsLogWriteLog {
  required uint64        logStreamHandle = 1;
  optional uint64        timeout         = 2;
  required safsLogRecord logRecord       = 3;
}
 
message safsLogWriteLogAsync {
  required uint64          logStreamHandle = 1;
  required uint64          invocation      = 2;
  optional safsLogAckFlags ackFlags        = 3;  
  required safsLogRecord   logRecord       = 4;
}

//3.6.4
message saLogWriteLogCallback {
  required uint64       invocation = 1;
  required safsAisError error      = 2;
}

//3.6.5
message saLogFilterSetCallback {
  required uint64               logStreamHandle = 1;
  required safsLogSeverityFlags logSeverity     = 2;
}

//3.6.6
message safsLogStreamClose {
  required uint64 logStreamHandle = 1;
}

//3.7
//3.7.1
message safsLogLimitGet {
  required uint64         handle     = 1;
  required safsLogLimitId limitId    = 2;
}

// Init Callback Message
message safsLogCallbacksInitialize {
  required uint64 handle = 1;
}

// Extended interfaces
message safsLogDeleteFiles {
  required uint64 handle            = 1;
  required string logFileName       = 2;
  optional string logFilePathName   = 3;
}

//
// LOG Message
//
message safsLogMessage {
  // One of the following will be filled in.
  // 3.5 Life Cycle
  optional safsLogInitialize                 initialize                 = 1;
  optional safsLogFinalize                   finalize                   = 2;
  // 3.6 Log Service Operations
  optional safsLogStreamOpen_2		     logStreamOpen		= 3;
  optional safsLogStreamOpenAsync_2	     logStreamOpenAsync		= 4;
  optional safsLogWriteLog		     logWriteLog		= 5;
  optional safsLogWriteLogAsync		     logWriteLogAsync		= 6;
  optional safsLogStreamClose		     logStreamClose		= 7;
  // 3.7 Limit Fetch API
  optional safsLogLimitGet		     logLimitGet		= 8;
  // Initiate Callbacks
  optional safsLogCallbacksInitialize        callbacksInitialize        = 9;
  // Extended Interface Functions
  optional safsLogDeleteFiles                logDeleteFiles             = 10;
}

// LOG Callback Message
message saLogCallbacks {
  // One of the following will be used.
  optional saLogStreamOpenCallback logStreamOpenCallback	= 1;
  optional saLogWriteLogCallback   logWriteLogCallback		= 2;
  optional saLogFilterSetCallback  logFilterSetCallback		= 3;
}

message safsLimitValue {
  // One of the following will be filled in.
  // optional int64  int64Value  = 1;
  required uint64 uint64Value = 2;
  // optional uint64 timeValue   = 3;
  // optional double floatValue  = 4;
  // optional double doubleValue = 5;
}

//
// Function return values
//
// Life Cycle
message safsLogInitializeRet {
  required safsAisError returnVal = 1;
  required uint64       handle	  = 2;
  required safsVersion  version	  = 3;
}

message safsLogFinalizeRet {
  required safsAisError returnVal = 1;
}

// Log Service Operations
message safsLogStreamOpen_2Ret {
  optional uint64       logStreamHandle = 1;
  required safsAisError returnVal       = 2;
}
  
message safsLogStreamOpenAsync_2Ret {
  required safsAisError returnVal = 1;
}  

message safsLogWriteLogRet {
  required safsAisError returnVal = 1;
}

message safsLogWriteLogAsyncRet {
  required safsAisError returnVal = 1;
}

message safsLogStreamCloseRet {
  required safsAisError returnVal = 1;
}

// Limit Fetch API
message safsLogLimitGetRet {
  required safsLimitValue limitValue = 1;
  required safsAisError returnVal    = 2;
}

// Callbacks Initialize Return
message safsLogCallbacksInitializeRet {
  required safsAisError returnVal = 1;
}

// Callbacks Return Message
message saLogCallbacksRet {
  required safsAisError returnVal = 1;
}

message safsLogDeleteFilesRet {
  required safsAisError returnVal = 1;
}

