//----------------------------------------------------------------------
//
// %EricssonCopyright%
// %CopyrightBegin%
//
// Copyright Ericsson AB 2012-2013. All Rights Reserved.
//
// The program may be used and/or copied only with the written permission from
// Ericsson AB, or in accordance with the terms and conditions stipulated in
// the agreement/contract under which the program has been supplied.
//
// %CopyrightEnd%
//
//--------------------------------------------------------------------
import "sa_ais.proto";
import "om.proto";

// 3.12.3
enum safsNtfNotificationType {
     sa_ntf_type_object_create_delete = 0x1000;
     sa_ntf_type_attribute_change     = 0x2000;
     sa_ntf_type_state_change         = 0x3000;
     sa_ntf_type_alarm                = 0x4000;
     sa_ntf_type_security_alarm       = 0x5000;
}

// 3.12.4
enum safsNtfEventType {
     sa_ntf_object_notifications_start = 0x1000;
     sa_ntf_object_creation            = 0x1001;
     sa_ntf_object_deletion            = 0x1002;

     sa_ntf_attribute_notifications_start = 0x2000;
     sa_ntf_attribute_added               = 0x2001;
     sa_ntf_attribute_removed             = 0x2002;
     sa_ntf_attribute_changed             = 0x2003;
     sa_ntf_attribute_reset               = 0x2004;

     sa_ntf_state_change_notifications_start = 0x3000;
     sa_ntf_object_state_change              = 0x3001;

     sa_ntf_alarm_notifications_start = 0x4000;
     sa_ntf_alarm_communication       = 0x4001;
     sa_ntf_alarm_qos                 = 0x4002;
     sa_ntf_alarm_processing          = 0x4003;
     sa_ntf_alarm_equipment           = 0x4004;
     sa_ntf_alarm_environment         = 0x4005;

     sa_ntf_security_alarm_notifications_start = 0x5000;
     sa_ntf_integrity_violation                = 0x5001;
     sa_ntf_operation_violation                = 0x5002;
     sa_ntf_physical_violation                 = 0x5003;
     sa_ntf_security_service_violation         = 0x5004;
     sa_ntf_time_violation                     = 0x5005;
}

// 3.12.5

// 3.12.6

// 3.12.7
message safsNtfClassId {
  required uint32 vendorId = 1;
  required uint32 majorId  = 2;
  required uint32 minorId  = 3;
}

// 3.12.8

// 3.12.9

// 3.12.10

// 3.12.11

// 3.12.12
enum safsNtfValueType {
     sa_ntf_value_uint8     = 0;
     sa_ntf_value_int8      = 1;
     sa_ntf_value_uint16    = 2;
     sa_ntf_value_int16     = 3;
     sa_ntf_value_uint32    = 4;
     sa_ntf_value_int32     = 5;
     sa_ntf_value_float     = 6;
     sa_ntf_value_uint64    = 7;
     sa_ntf_value_int64     = 8;
     sa_ntf_value_double    = 9;
     sa_ntf_value_ldap_name = 10;
     sa_ntf_value_string    = 11;
     sa_ntf_value_ipaddress = 12;
     sa_ntf_value_binary    = 13;
     sa_ntf_value_array     = 14;
     sa_ntf_value_csstructt = 9999;  // CsStructT Struct attribute used for RBS Control System
}

// 3.12.13
message safsNtfValue {
  // One of the following will be filled in.
  optional uint32  uint8Val  = 1;
  optional int32   int8Val   = 2;
  optional uint32  uint16Val = 3;
  optional int32   int16Val  = 4;
  optional uint32  uint32Val = 5;
  optional int32   int32Val  = 6;
  optional double  floatVal  = 7;
  optional uint64  uint64Val = 8;
  optional int64   int64Val  = 9;
  optional double  doubleVal = 10;
  optional bytes   variable  = 11;
  optional safsImmCsStruct csstruct = 9999; //Struct attribute used for RBS Control System
}

// 3.12.14

// 3.12.15
message safsNtfAdditionalInfo {
  required uint32           infoId    = 1;
  required safsNtfValueType infoType  = 2;
  required safsNtfValue	    infoValue = 3;
}

// 3.12.16
enum safsNtfProbableCause {
     sa_ntf_adapter_error                                    = 0;
     sa_ntf_application_subsystem_failure		     = 1;
     sa_ntf_bandwidth_reduced				     = 2;
     sa_ntf_call_establishment_error			     = 3;
     sa_ntf_communications_protocol_error		     = 4;
     sa_ntf_communications_subsystem_failure		     = 5;
     sa_ntf_configuration_or_customization_error	     = 6;
     sa_ntf_congestion					     = 7;
     sa_ntf_corrupt_data				     = 8;
     sa_ntf_cpu_cycles_limit_exceeded                        = 9;
     sa_ntf_dataset_or_modem_error                           = 10;
     sa_ntf_degraded_signal                                  = 11;
     sa_ntf_d_t_e                                            = 12;
     sa_ntf_enclosure_door_open                              = 13;
     sa_ntf_equipment_malfunction                            = 14;
     sa_ntf_excessive_vibration				     = 15;
     sa_ntf_file_error					     = 16;
     sa_ntf_fire_detected				     = 17;
     sa_ntf_flood_detected				     = 18;
     sa_ntf_framing_error				     = 19;
     sa_ntf_heating_or_ventilation_or_cooling_system_problem = 20;
     sa_ntf_humidity_unacceptable =                            21;
     sa_ntf_input_output_device_error =                        22;
     sa_ntf_input_device_error =                               23;
     sa_ntf_l_a_n_error =                                      24;
     sa_ntf_leak_detected =                                    25;
     sa_ntf_local_node_transmission_error =                    26;
     sa_ntf_loss_of_frame =                                    27;
     sa_ntf_loss_of_signal =                                   28;
     sa_ntf_material_supply_exhausted =                        29;
     sa_ntf_multiplexer_problem =                              30;
     sa_ntf_out_of_memory =                                    31;
     sa_ntf_output_device_error =                              32;
     sa_ntf_performance_degraded =                             33;
     sa_ntf_power_problem =                                    34;
     sa_ntf_pressure_unacceptable =                            35;
     sa_ntf_processor_problem =                                36;
     sa_ntf_pump_failure =                                     37;
     sa_ntf_queue_size_exceeded =                              38;
     sa_ntf_receive_failure =                                  39;
     sa_ntf_receiver_failure =                                 40;
     sa_ntf_remote_node_transmission_error =                   41;
     sa_ntf_resource_at_or_nearing_capacity =                  42;
     sa_ntf_response_time_excessive =                          43;
     sa_ntf_retransmission_rate_excessive =                    44;
     sa_ntf_software_error =                                   45;
     sa_ntf_software_program_abnormally_terminated =           46;
     sa_ntf_software_program_error =                           47;
     sa_ntf_storage_capacity_problem =                         48;
     sa_ntf_temperature_unacceptable =                         49;
     sa_ntf_threshold_crossed =                                50;
     sa_ntf_timing_problem =                                   51;
     sa_ntf_toxic_leak_detected =                              52;
     sa_ntf_transmit_failure =                                 53;
     sa_ntf_transmitter_failure =                              54;
     sa_ntf_underlying_resource_unavailable =                  55;
     sa_ntf_version_mismatch =                                 56;
     sa_ntf_authentication_failure =                           57;
     sa_ntf_breach_of_confidentiality =                        58;
     sa_ntf_cable_tamper =                                     59;
     sa_ntf_delayed_information =                              60;
     sa_ntf_denial_of_service =                                61;
     sa_ntf_duplicate_information =                            62;
     sa_ntf_information_missing =                              63;
     sa_ntf_information_modification_detected =                64;
     sa_ntf_information_out_of_sequence =                      65;
     sa_ntf_intrusion_detection =                              66;
     sa_ntf_key_expired =                                      67;
     sa_ntf_non_repudiation_failure =                          68;
     sa_ntf_out_of_hours_activity =                            69;
     sa_ntf_out_of_service =                                   70;
     sa_ntf_procedural_error =                                 71;
     sa_ntf_unauthorized_access_attempt =                      72;
     sa_ntf_unexpected_information =                           73;
     sa_ntf_unspecified_reason =                               74;
}

// 3.12.17
message safsNtfSpecificProblem {
  required uint32           problemId      = 1;
  required safsNtfClassId   problemClassId = 2;
  required safsNtfValueType problemType	   = 3;
  required safsNtfValue	    problemValue   = 4;
}

// 3.12.18
enum safsNtfSeverity {
     sa_ntf_severity_cleared       = 0;
     sa_ntf_severity_indeterminate = 1;
     sa_ntf_severity_warning       = 2;
     sa_ntf_severity_minor         = 3;
     sa_ntf_severity_major         = 4;
     sa_ntf_severity_critical      = 5;
}

// 3.12.19
enum safsNtfSeverityTrend {
     sa_ntf_trend_more_severe = 0;
     sa_ntf_trend_no_change   = 1;
     sa_ntf_trend_less_severe = 2;
}

// 3.12.19
message safsNtfCallbacks {
  required bool saNtfNotificationCallback          = 1;
  required bool saNtfNotificationDiscardedCallback = 2;
}

// 3.12.20
message safsNtfThresholdInformation {
  required uint32           thresholdId         = 1;
  required safsNtfValueType thresholdValueType  = 2;
  required safsNtfValue     thresholdValue      = 3;
  required safsNtfValue     thresholdHysteresis = 4;
  required safsNtfValue     observedValue       = 5;
  required int64            armTime             = 6;
}

// 3.12.21
message safsNtfProposedRepairAction {
  required uint32           actionId        = 1;
  required safsNtfValueType actionValueType = 2;
  required safsNtfValue     actionValue     = 3;
}

// 3.12.22
enum safsNtfSourceIndicator {
     sa_ntf_object_operation     = 1;
     sa_ntf_management_operation = 2;
     sa_ntf_unknown_operation    = 3;
}

// 3.12.23
message safsNtfStateChange {
  required uint32 stateId  = 1;
  optional uint32 oldState = 2;
  required uint32 newState = 3;
}

// 3.12.24
message safsNtfAttribute {
  required uint32           attributeId     = 1;
  required safsNtfValueType attributeType   = 2;
  required safsNtfValue     attributeValue  = 3;
}

// 3.12.25
message safsNtfAttributeChange {
  required uint32           attributeId       = 1;
  required safsNtfValueType attributeType     = 2;
  optional safsNtfValue     oldAttributeValue = 3;
  required safsNtfValue     newAttributeValue = 4;
}

// 3.12.26
message safsNtfServiceUser {
  required safsNtfValueType valueType = 1;
  required safsNtfValue     value     = 2;
}

// 3.12.27
message safsNtfSecurityAlarmDetector {
  required safsNtfValueType valueType = 1;
  required safsNtfValue     value     = 2;
}

// 3.12.28
message safsNtfNotificationHeader {
  required safsNtfEventType      eventType               = 1;
  required string                notificationObject      = 2;
  required string                notifyingObject         = 3;
  required safsNtfClassId        notificationClassId     = 4;
  required int64                 eventTime               = 5;
  repeated uint64                correlatedNotifications = 6;
  optional string                additionalText          = 7;
  repeated safsNtfAdditionalInfo additionalInfo          = 8;
}

// 3.12.29
message safsNtfObjectCreateDeleteNotification {
  required safsNtfNotificationHeader notificationHeader = 1;
  required safsNtfSourceIndicator    sourceIndicator    = 2;
  repeated safsNtfAttribute          objectAttributes   = 3;
}

// 3.12.30
message safsNtfAttributeChangeNotification {
  required safsNtfNotificationHeader notificationHeader = 1;
  required safsNtfSourceIndicator    sourceIndicator    = 2;
  repeated safsNtfAttributeChange    changedAttributes  = 3;
}

// 3.12.31
message safsNtfStateChangeNotification {
  required safsNtfNotificationHeader notificationHeader = 1;
  required safsNtfSourceIndicator    sourceIndicator    = 2;
  repeated safsNtfStateChange        changedStates      = 3;
}

// 3.12.32
message safsNtfAlarmNotification {
  required safsNtfNotificationHeader   notificationHeader    = 1;
  required safsNtfProbableCause        probableCause         = 2;
  repeated safsNtfSpecificProblem      specificProblems      = 3;
  required safsNtfSeverity             perceivedSeverity     = 4;
  required safsNtfSeverityTrend        trend                 = 5;
  optional safsNtfThresholdInformation thresholdInformation  = 6;
  repeated safsNtfAttribute            monitoredAttributes   = 7;
  repeated safsNtfProposedRepairAction proposedRepairActions = 8;
}

// 3.12.33
message safsNtfSecurityAlarmNotification {
  required safsNtfNotificationHeader    notificationHeader    = 1;
  required safsNtfProbableCause         probableCause         = 2;
  required safsNtfSeverity              severity              = 3;
  required safsNtfSecurityAlarmDetector securityAlarmDetector = 4;
  required safsNtfServiceUser           serviceUser           = 5;
  required safsNtfServiceUser           serviceProvider       = 6;
}

// 3.12.34

// 3.12.35

// 3.12.36
message safsNtfNotificationFilterHeader {
  repeated safsNtfEventType eventTypes           = 1;
  repeated string           notificationObjects  = 2;
  repeated string           notifyingObjects     = 3;
  repeated safsNtfClassId   notificationClassIds = 4;
}

// 3.12.37
message safsNtfObjectCreateDeleteNotificationFilter {
  required safsNtfNotificationFilterHeader notificationFilterHeader = 1;
  repeated safsNtfSourceIndicator          sourceIndicators         = 2;
}

// 3.12.38
message safsNtfAttributeChangeNotificationFilter {
  required safsNtfNotificationFilterHeader notificationFilterHeader = 1;
  repeated safsNtfSourceIndicator          sourceIndicators         = 2;
}

// 3.12.39
message safsNtfStateChangeNotificationFilter {
  required safsNtfNotificationFilterHeader notificationFilterHeader = 1;
  repeated safsNtfSourceIndicator          sourceIndicators         = 2;
  repeated safsNtfStateChange              changedStates            = 3;
}

// 3.12.40
message safsNtfAlarmNotificationFilter {
  required safsNtfNotificationFilterHeader notificationFilterHeader = 1;
  repeated safsNtfProbableCause            probableCauses           = 2;
  repeated safsNtfSeverity                 perceivedSeverities      = 3;
  repeated safsNtfSeverityTrend            trends                   = 4;
}

// 3.12.41
message safsNtfSecurityAlarmNotificationFilter {
  required safsNtfNotificationFilterHeader notificationFilterHeader = 1;
  repeated safsNtfProbableCause            probableCauses           = 2;
  repeated safsNtfSeverity                 severities               = 3;
  repeated safsNtfSecurityAlarmDetector    securityAlarmDetectors   = 4;
  repeated safsNtfServiceUser              serviceUsers             = 5;
  repeated safsNtfServiceUser              serviceProviders         = 6;
}

// 3.12.42
enum safsNtfSearchMode {
     sa_ntf_search_before_or_at_time = 1;
     sa_ntf_search_at_time           = 2;
     sa_ntf_search_at_or_after_time  = 3;
     sa_ntf_search_before_time       = 4;
     sa_ntf_search_after_time        = 5;
     sa_ntf_search_notification_id   = 6;
     sa_ntf_search_only_filter       = 7;
}

// 3.12.43
message safsNtfSearchCriteria {
  required safsNtfSearchMode searchMode     = 1;
  required int64             eventTime      = 2;
  required uint64            notificationId = 3;
}

// 3.12.44
enum safsNtfSearchDirection {
     sa_ntf_search_older   = 1;
     sa_ntf_search_younger = 2;
}

// 3.12.45
message safsNtfNotificationTypeFilters {
  optional safsNtfObjectCreateDeleteNotificationFilter objectCreateDeleteNotificationFilter = 1;
  optional safsNtfAttributeChangeNotificationFilter    attributeChangeNotificationFilter    = 2;
  optional safsNtfStateChangeNotificationFilter        stateChangeNotificationFilter        = 3;
  optional safsNtfAlarmNotificationFilter              alarmNotificationFilter              = 4;
  optional safsNtfSecurityAlarmNotificationFilter      securityAlarmNotificationFilter      = 5;
}

// 3.12.46
message safsNtfNotification {
  // One of the following will be filled in.
  optional safsNtfObjectCreateDeleteNotification objectCreateDeleteNotification = 1;
  optional safsNtfAttributeChangeNotification    attributeChangeNotification    = 2;
  optional safsNtfStateChangeNotification        stateChangeNotification        = 3;
  optional safsNtfAlarmNotification              alarmNotification              = 4;
  optional safsNtfSecurityAlarmNotification      securityAlarmNotification      = 5;
}

// 3.15.3.3
message saNtfNotificationCallback {
  required uint32              subscriptionId = 1;
  required safsNtfNotification notification   = 2;

}

// 3.15.3.4
message saNtfNotificationDiscardedCallback {
  required uint32                  subscriptionId                   = 1;
  required safsNtfNotificationType notificationType 		    = 2;
  repeated uint64		   discardedNotificationIdentifiers = 3;
}

// Life Cycle
message safsNtfInitialize {
  optional safsNtfCallbacks callbacks = 1;
  optional safsVersion      version   = 2;
} // out parameters in result

message safsNtfFinalize {
  required uint64 handle = 1;
}

// Producer
message safsNtfNotificationSend {
  required uint64              handle       = 1;
  required safsNtfNotification notification = 2;
}

// Consumer
message safsNtfNotificationSubscribe {
  required uint64                         handle                  = 1;
  required safsNtfNotificationTypeFilters notificationTypeFilters = 2;
  required uint32			  subscriptionId	  = 3;
}

message safsNtfNotificationUnsubscribe {
  required uint64 handle         = 1;
  required uint32 subscriptionId = 2;
}

message safsNtfNotificationReadInitialize {
  required uint64                         handle                  = 1;
  required safsNtfSearchCriteria          searchCriteria	  = 2;
  required safsNtfNotificationTypeFilters notificationTypeFilters = 3;
}

message safsNtfNotificationReadNext {
  required uint64                 readHandle      = 1;
  required safsNtfSearchDirection searchDirection = 2;
}

message safsNtfNotificationReadFinalize {
  required uint64 readHandle = 1;
}

// Init Callback Message
message safsNtfCallbacksInitialize {
  required uint64 handle = 1;
}

//
// NTF Message
//
message safsNtfMessage {
  // One of the following will be filled in.
  // 3.13 Life Cycle
  optional safsNtfInitialize                 initialize                 = 1;
  optional safsNtfFinalize                   finalize                   = 2;
  // 3.14 Producer
  optional safsNtfNotificationSend	     notificationSend		= 3;
  // 3.15 Consumer
  optional safsNtfNotificationSubscribe      notificationSubscribe	= 4;
  optional safsNtfNotificationUnsubscribe    notificationUnsubscribe	= 5;
  optional safsNtfNotificationReadInitialize notificationReadInitialize = 6;
  optional safsNtfNotificationReadNext       notificationReadNext	= 7;
  optional safsNtfNotificationReadFinalize   notificationReadFinalize	= 8;
  // Initiate Callbacks
  optional safsNtfCallbacksInitialize        callbacksInitialize        = 9;
}

// NTF Callback Message
message SaNtfCallbacks {
  // One of the following will be used.
  optional saNtfNotificationCallback          notificationCallback          = 1;
  optional saNtfNotificationDiscardedCallback notificationDiscardedCallback = 2;
}

//
// Function return values
//
// Life Cycle
message safsNtfInitializeRet {
  required safsAisError returnVal = 1;
  required uint64       handle	  = 2;
  required safsVersion  version	  = 3;
}

message safsNtfFinalizeRet {
  required safsAisError returnVal = 1;
}

message safsNtfNotificationSendRet {
  required safsAisError returnVal  = 1;
  optional uint64       identifier = 2;
}

message safsNtfNotificationSubscribeRet {
  required safsAisError returnVal = 1;
}

message safsNtfNotificationUnsubscribeRet {
  required safsAisError returnVal = 1;
}

message safsNtfNotificationReadInitializeRet {
  required safsAisError returnVal  = 1;
  optional uint64       readHandle = 2;
}

message safsNtfNotificationReadNextRet {
  required safsAisError        returnVal    = 1;
  optional safsNtfNotification notification = 2;
}

message safsNtfNotificationReadFinalizeRet {
  required safsAisError returnVal = 1;
}

// Callbacks Initialize Return
message safsNtfCallbacksInitializeRet {
  required safsAisError returnVal = 1;
}
