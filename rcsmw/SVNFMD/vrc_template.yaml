##
# This is the VNFD for the vRC node.
##

tosca_definitions_version: tosca_simple_profile_for_nfv_1_0_0

description: Virtual Radio Control Function

metadata:
  ID: PNO-PREV
  vendor: Ericsson
  version: "PREV"
  name: vRC
  vnfm_info: EricssonRanVnfm

topology_template:

  inputs:
    tenant_network_name:
      type: string
      description: Network Name

    oam_network_name:
      type: string
      description: Network Name

    backhaul_network_name:
      type: string
      description: Network Name

    fronthaul_network_name:
      type: string
      description: Network Name

    from_volume_db:
      type: string
      description: DB Volume id of from state
      default: Null

    from_volume_log:
      type: string
      description: LOG Volume id of from state
      default: Null

  node_templates:

    vRC:
      type: tosca.nodes.Compute
      capabilities:
        nfv_compute:
          properties:
            disk_size: 0
            mem_size: 4096
            num_cpus: 2
      requirements:
        - local_storage:
            node: db_storage
            relationship:
              type: AttachesTo
              properties:
                location: /db
        - local_storage:
            node: log_storage
            relationship:
              type: AttachesTo
              properties:
                location: /log
      artifacts:
        vrcImage:
          type: tosca.artifacts.Deployment.Image.VM.QCOW2
          file: PNO_PREV.qcow2
      interfaces:
        Standard:
          configure: scripts/userdata.file

    tenant_network:
      type: tosca.nodes.network.Network
      network_name: { get_input: tenant_network_name }

    tenant_port:
      type: tosca.nodes.network.Port
      properties:
        order: 0
      requirements:
        - binding: vRC
        - link: tenant_network

    oam_network:
      type: tosca.nodes.network.Network
      network_name: { get_input: oam_network_name }

    oam_port:
      type: tosca.nodes.network.Port
      properties:
        order: 1
      requirements:
        - binding: vRC
        - link: oam_network

    backhaul_network:
      type: tosca.nodes.network.Network
      network_name: { get_input: backhaul_network_name }

    backhaul_port:
      type: tosca.nodes.network.Port
      properties:
        order: 2
      requirements:
        - binding: vRC
        - link: backhaul_network

    fronthaul_network:
      type: tosca.nodes.network.Network
      network_name: { get_input: fronthaul_network_name }

    fronthaul_port:
      type: tosca.nodes.network.Port
      properties:
        order: 3
      requirements:
        - binding: vRC
        - link: fronthaul_network

    db_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: 1
        volume_id:  { get_input: from_volume_db }

    log_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: 1
        volume_id:  { get_input: from_volume_log }

  interfaces:
    - event:
      - start instantiate
      script: scripts/add_config_files.py
    - event:
      - start instantiate
      script: scripts/config_volume_cloning.py
    - event:
      - end instantiate
      - end heal
      script: scripts/start_vnf_heartbeat.py
    - event:
      - start terminate
      - start heal
      script: scripts/terminate_vnf_heartbeat.py
    - event:
      - start heal
      script: scripts/start_heal.py
    - event:
      - start operate
      script: scripts/start_operate.py
    - event:
      - upgrade prepare
      script: scripts/prepare.py
    - event:
      - upgrade verify
      script: scripts/verify.py
    - event:
      - upgrade activate
      script: scripts/activate_select.py
    - event:
      - upgrade activate_nfs
      script: scripts/activate_nfs.py
    - event:
      - upgrade activate_cinder
      script: scripts/activate_cinder.py
    - event:
      - upgrade restore
      script: scripts/restore_cinder.py
    - event:
      - upgrade lcm_common.vnf_api_comm
      script: scripts/vnf_api_comm.py
    - event:
      - upgrade lcm_common.lcm_wf_utility
      script: scripts/lcm_wf_utility.py
