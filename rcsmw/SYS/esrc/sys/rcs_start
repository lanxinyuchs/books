#!/bin/bash
## -----------------------------------------------------------------------------
## %CCaseFile:	rcs_start %
## %CCaseRev:	/main/R2A/R3A/R4A/R5A/R6A/R8A/R9A/R10A/R11A/R12A/3 %
## %CCaseDate:	2017-11-28 %
## %CCaseDocNo:  %
##
## Author:      etxlg
## Description:
##	Start RCS middleware, i.e. the erlang/OTP run-time.
##	Meant for use only in target environment.
##	This is run directly by EE (the path to here has to be resolved in
##	runtime.
##	This script is a concatenation of start_rcs.sh@R2A/89 and
##	S10middleware@R2A/29 with all code related to the simulator removed.
##
## -----------------------------------------------------------------------------
##
## ----------------------------------------------------------
## %CCaseTemplateFile:   %
## %CCaseTemplateId: %
##
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2014-2017 All rights reserved.
## 
## The information in this document is the property of Ericsson.
## 
## Except as specifically authorized in writing by Ericsson, the 
## receiver of this document shall keep the information contained 
## herein confidential and shall protect the same in whole or in 
## part from disclosure and dissemination to third parties.
## 
## Disclosure and disseminations to the receivers employees shall 
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------
## #1.    REVISION LOG
## ----------------------------------------------------------
## Rev        Date         Name        What
## --------   --------     --------    ------------------------
## Rx         2014-05-07   etxlg     Place holder created for release
## R3A/1-2    2014-09-12   etxarnu   Chmod 777 /rcs/persistent for IC use
## R3A/3      2014-10-07   etxarnu   Merged with R2A/19 (to-alias)
## R3A/4      2014-10-07   etxarnu   Merged with R2A/20 (pgh_restart_board -e)
## R3A/5      2014-10-16   etxarnu   Added $RELEASES_DIR/libs/arm to ld.conf
## R3A/6      2014-10-22   etxarnu   Added ll and sirpa aliases
## R3A/7      2014-10-23   etxarnu   Changed to +Bi to ignore ctrl-C
## R3A/8      2014-10-24   etxarnu   Corrected to alias.
##                                   Corrected ERL_CRASH_DUMP env setting
## R3A/10     2014-11-11   etxarnu   Added call to restart_trace
## R3A/11     2014-11-12   etxarnu   Bug fixes
## R3A/12     2014-11-18   etxlg     New lib-dir (OOT)
## R3A/13     2014-11-18   etxjotj   Embedded mode
## R3A/14     2014-11-19   etxlg     Part merge R2A/22, close epmd port
## R3A/15     2014-11-20   etxjotj   Backed out embedded mode
## R3A/16     2014-11-20   etxasta   New lib-dir (CERT)
## R3A/17     2014-11-20   etxarnu   removed extra line after CERT in ldconfig
## R3A/18     2014-11-21   etxarnu   Bug fix in CERT path
## R3A/19     2014-12-01   etxpeno   New lib-dir (PES)
## R3A/20     2014-12-10   etxarnu   Added once_mw and improved no_mw
## R3A/21     2015-01-12   etxarnu   Options to erl to limit beam size
## R3A/24     2015-01-19   etxarnu   Removed beam limit again
## R3A/25     2015-01-28   etxarnu   Added ulimit -n 1024
## R3A/26     2015-02-25   etxarnu   chmod o+r /var/log/* to make ESI happy
## R3A/27     2015-03-13   etxasta   Clear dev_patches, prevent patching this file
## R3A/28     2015-03-16   etxarnu   Bg fix in previous version
## R3A/29     2015-04-09   etxarnu   Write hostname to /etc/hostname
## R3A/30     2015-04-22   etxarnu   Make log directories writeable for root
## R3A/31     2015-04-27   etxlg     No lab-adaption on secure boards
## R3A/32     2015-05-18   etxarnu   Put a list of all files in /home/sirpa and their
##                                   sizes in /rcs/erlang/home_files.txt (for debug)
## R4A/1      2015-05-12   etxarnu   +sbwt none
## R4A/2      2015-05-19   etxarnu   Merged with R3A/32
## R4A/3      2015-06-02   etxarnu   Changed COM_LD_PRELOAD to libcom_trace_probe.se
## R4A/4      2015-07-09   eolaand   Prepare for tmpfs handling
## R4A/7      2015-09-02   etxarnu   Cluster additions
## R4A/8      2015-09-02   etxarnu   New lib dir (TIM2)
## R4A/9      2015-09-02   etxarnu   Removed cluster stuff for no
## R4A/10     2015-09-03   etxarnu   Cluster stuff back and added update_hosts
## R4A/15     2015-09-21   etxarnu   bug fix
## R4A/16     2015-09-24   etxarnu   corrected spelling error in cluster_complete
## R4A/17     2015-09-24   etxarnu   Use new pgh_spawn  that can handle warm restart
##                                   and supervision of IELL programs
## R4A/20     2015-09-25   etxtory   erlang.log moved to pramfs + fewer files
## R4A/21     2015-09-27   etxtory   HT88403 - Handle /rcs disk full (panic clean)
##                                   sleep -> usleep for start_iell (0.1s intervals)
## R4A/22     2015-09-28   etxtory   Temp removal of appdump (rcm tool fails)
## R4A/24     2015-10-01   etxtory   erl_crash to erlang_disk
## R4A/25     2015-10-06   etxarnu   Find IELL and TN libs more generically
## R4A/27     2015-10-08   etxarnu   Added -L option to find, check wait_for_core_time
## R4A/28     2015-10-08   eolaand   Uncomment tmpfs handling for applicationtmp
## R4A/29     2015-10-14   etxtory   Updated cleaning  (R4A/21)
## R4A/30     2015-10-15   etxarnu   Changed name of iell so file to find iell libs
## R4A/31     2015-10-16   etxtory   Added DUMP_DIR
## R4A/32     2015-10-19   etxtory   Set ip_forward=0 (for LMT) - part of HU20226
## R5A/1      2015-10-28   etxpeno   Set time warp mode to Multi Time
## R5A/2      2015-10-30   etxarnu   Use IellStartParams.source
## R5A/5      2015-11-10   etxarnu   Bug in ldconfig for TN-libs
## R5A/6      2015-11-11   etxarnu   Bug in ldconfig for TN-libs
## R5A/7      2015-11-17   etxarnu   Do ldconfig of all TN-libs
## R4A/35     2015-11-05   etxarnu   Always start iell programs (again) on DUS
##                                   but only wait for TMMI if cluster_complete is set
## R4A/36     2015-11-10   etxarnu   Updated to handle TNHW_LIB
##                                   Clean away possible pmd files in /rcs/dump/*
## R4A/37     2015-11-11   etxarnu   ldconfig for tnhw added
## R4A/38     2015-11-17   etxarnu   ldconfig for tnhw fixed
## R4A/39     2015-11-27   etxarnu   Changed max no of fds to 2048
## R5A/8      2015-11-30   etxarnu   Merge R4A changes
## R5A/9      2015-12-07   etxarnu   Added support for IEP_LIBS & IEP_HWLIBS
##                                   in IellStartParams.source
## R5A/10     2016-01-20   etxarnu   Removed use of ldconfig
## R5A/11     2016-02-02   etxarnu   Added -env HEART_KILL_SIGNAL SIGABRT to erl
## R5A/12     2016-02-05   etxarnu   Removed -env HEART_KILL_SIGNAL SIGABRT to erl
## R5A/14     2016-02-24   etxarnu   Added start of npa-init
## R5A/15     2016-03-18   etxarnu   Removed -e flag from pgh_restart_board to
###                                  avoid stepping UBOOT counter
## R5A/16     2016-03-23   etxarnu   HU69659:Added -e flag again, removed after 10 min in appmServer
## R5A/18     2016-04-12   etxtory   Handling mnesia cores
## R6A/1      2016-04-19 etxarnu   Remove hardcoded path to MW
## R6A/2      2016-05-11 etxarnu   at first installation, use /software as SW_TOP
## R6A/3      2016-06-20 etxarnu   HU91343: Added sleep 20 in HEART_CMD
## R6A/4      2016-08-18 etxarnu   HU91343: removed logging in HEART_CMD
## R6A/5      2016-09-02 etxarnu   removed +Bi option to erl on secure boards
## R8A/1      2017-01-20 erarafo   insert README file in dev_patches/
## R9A/1      2017-03-28 etxberb   Removed create_directories for cslibs & libs.
## R9A/2      2017-03-29 etxarnu   Created /var/log/consul if BPU
## R9A/3      2017-03-31 etxarnu   Enabled manage_erl_crash_dumps
## R10A/1     2017-06-05 ejinfeg   Added a new folder "/rcs/fi/*" to ORDER
## R10A/2     2017-07-08 etomist   Removal of esi files in /rcs/networkloader added to ORDER
## R11A/1     2017-08-10 edamkon   Removal of erl_crash_dump files in /rcs/erlang_disk added to ORDER
## R11A/2     2017-08-14 etxtory   Limit size of ERL_CRASH_DUMP
##                                 Limit time for dumping ERL_CRASH_DUMP_SECONDS
## R11A/3     2017-09-25 etxlg     SP691 dir for XCM extended observability
## R12A/1     2017-10-25 etxarnu   only use *CXC* in wildcards
## R12A/2     2017-11-17 etxarnu   use BT instead of reading rbs-sys
## R12A/3     2017-11-28 etxarnu   Make it possible to use ipv6 for erlang 
##                                 distribution in testing
##                                 
## --------- ---------------------------------------------------- column 80 --->
##
RCS_USER=sirpa
RCS_HOME=/home/${RCS_USER}

ERLANG_LOG_DIR=/rcs/erlang
ERLANG_DISK_DIR=/rcs/erlang_disk
LAB_ADAPTION=/rcs/networkloader/config_lab.sh
export DEV_PATCHES=${RCS_HOME}/dev_patches
XCM_OBSERVABILITY=/run/xcm/ctl  #XCM compiled in default
PROG=`echo $0 | tr -s /`   #get rid of any duplicated "/"
PROG_NAME=${0##*/}

if
    cup -c 2>/dev/null
then
    # There is VC, the board is secure
    # HERE disable DEV_PATCHES when running secure
    \rm -rf ${DEV_PATCHES}/*
fi

ARMDIR=arm-wr6
if [ -e ${RCS_HOME}/old_wr ]; then
    ARMDIR=arm
fi
export ARMDIR

if [ -e ${RCS_HOME}/software ]; then
    SW_TOP=${RCS_HOME}/software
else
    SW_TOP=/software #before installation
fi

rcsmw_xml=`grep "<mwinfo/>" ${SW_TOP}/*/*.xml | awk -F: '{ print $1 }' `
if [ "${rcsmw_xml}" == "" ]; then
    rcs_software=${SW_TOP}/RCSMW-ARM_CXP9025546_3_*
else
    rcs_software=`dirname ${rcsmw_xml}`
fi
logger "rcs_start: rcs_software=$rcs_software"
resolve_sys=${rcs_software}/*CXC*/sys-*
resolve_otp=${rcs_software}/*CXC*/otp-*/priv/tgt_${ARMDIR}

#
# Define echo_log Procedure
#
echo_log()
{
    printf "${PROG_NAME}: %s\n" "$*" >>/dev/kmsg
}

#log a message
start_log() {
    #can run before dir is created and lofile assigned
    if [ -n ${logfile:-""} -a -d ${ERLANG_LOG_DIR} ]; then
	DATE=`date "+%Y-%m-%d %H:%M:%S"`
	printf "${DATE} ${PROG_NAME}: %s\n" "$*" >> ${logfile}
    else
	echo_log "$*"
    fi
}

#log a message to  and exit
fatal() {
    start_log "FATAL: $*"
    exit 1
}

#
# Findpatched version of a file.
# for now there is only one single dir we look in
# HERE remember to disable when running secure
#
find_patch() {
    if
        cup -c 2>/dev/null
    then
        echo_log "Secure node, no patching"
        return 1
    else
        local file=${1##*/} #get the basename
        if [ -f ${DEV_PATCHES}/${file} ]; then
            echo ${DEV_PATCHES}/${file}
            return 0
        fi
        return 1
    fi
}


# Manage patch of this program (to be disabled when running secure)
if
    cup -c 2>/dev/null
then
    echo_log "Secure node, no patching of the rcs_start script"
else
    if
        find_patch ${PROG} && [ "${PROG}" != "${DEV_PATCHES}/${PROG_NAME}" ]
    then
        echo_log "Found patched version of program, exec patched version..."
        exec ${DEV_PATCHES}/${PROG_NAME}
    fi
fi

# $1 is the filepath to logfile, create/chown if not existing
# move previous to $1.old
# hopefully ensures that it can't become to big/lg
rotate_startlog()
{
    [ -f $1 ] && {
	s_log=$1.old.gz
	[ -e  ${s_log}.4 ] && mv ${s_log}.4 ${s_log}.5
	[ -e  ${s_log}.3 ] && mv ${s_log}.3 ${s_log}.4
	[ -e  ${s_log}.2 ] && mv ${s_log}.2 ${s_log}.3
	[ -e  ${s_log} ]   && mv ${s_log}   ${s_log}.2
	mv -f $1 $1.old && gzip $1.old
	chown ${RCS_USER_ID}:${RCS_USER_GID} $1.old.gz
     }
	> $1
	chown ${RCS_USER_ID}:${RCS_USER_GID} $1
}

# for debug, list all files in home and store in /rcs/erlang/home_files.txt
print_home_dir_files()
{
    home_log=${ERLANG_LOG_DIR}/home_files.txt
    [ -e  ${home_log}.4 ] && mv ${home_log}.4 ${home_log}.5
    [ -e  ${home_log}.3 ] && mv ${home_log}.3 ${home_log}.4
    [ -e  ${home_log}.2 ] && mv ${home_log}.2 ${home_log}.3
    [ -e  ${home_log}.1 ] && mv ${home_log}.1 ${home_log}.2
    echo "df -kh  ${RCS_HOME}" >  ${home_log}.1
    df -kh  ${RCS_HOME} >>  ${home_log}.1
    echo "---" >> ${home_log}.1
    echo "du -h /home/sirpa" >> ${home_log}.1
    du -h /home/sirpa >> ${home_log}.1
    echo "---" >> ${home_log}.1
    echo "ls -lhR /home/sirpa/" >> ${home_log}.1
    ls -lhR /home/sirpa/ >>  ${home_log}.1

}

#extract numerical id/gid from passwd
get_id_gid()
{
    awk -F: -v user=${RCS_USER} '$1==user {print $3, $4}' /etc/passwd
}

#
# Define resolve_dir_path Procedure
#
resolve_dir_path() {
    local in_path="${1}"
    set -- $1
    if [ $# -ne 1 -o  ! -d ${1} ]; then
	echo_log "FIXME! do fallback or such"
	fatal "Couldn't resolve path: ${in_path}"
    fi
    echo ${1}
}

#
# Define is_lab Procedure
#
# cup -c -> returns	0 board secure
# 			1 board open
# 			2 board broken (or old one in lab)
# to continue working in the labs this returns trues as long as cup -c doesn't
# return 0, i.e. a broken board will be treated as open
is_lab()
{
    if
	cup -c 2>/dev/null
    then
	return 1
    else
	return 0
    fi
}

has_iell()
{
    iellparams=`find -L ${RCS_HOME}/software/ -name IellStartParams.source`
    if [ "$iellparams" == "" ]; then
	return 1
    else
	return 0
    fi
}


create_directories() {
    local dir
    for dir
    do
   	[ -d $dir ] || {
	    mkdir -p $dir || fatal "Failed to create directory: $dir"
                        start_log "Created directory: $dir"
	    chown -R ${RCS_USER_ID}:${RCS_USER_GID} $dir
	    # Next is to allow program with CAP to write in log dirs
	    chmod o+w $dir
	    chmod g+w $dir
	}
    done
}

# Mount tmpfs with default size 1M for now.
mount_tmpfs() {
    local dir
    for dir
    do
   	if ! mountpoint -q "$dir" ; then
	    mount -t tmpfs -o size=1m,mode=0777 tmpfs $dir ||
	        fatal "Failed to mount tmpfs: $dir"
            start_log "Mounted tmpfs: $dir"
	fi
    done
}

# check if the link exists and points to something
# else make a symlink $2 -> $1 and chown it (the link)
symlink_file()
{
    if [ ! -e ${2}/${1##*/} ]; then
	ln -sf $1 $2 || fatal "Failed to symlink: $2 -> $1"
	chown -h ${RCS_USER_ID}:${RCS_USER_GID} $2
    fi
}

# make_release.escript <CodeRoot> <OtpRoot> <LogFile>
## the <Version> (RCS_VERSION) and <System> (RCS_SYSTEM) are  set and written
## to a sourceable script-file: ${RCS_HOME}/releases/start_data
## release created in cwd so change to where we want it
create_release() {
    su $RCS_USER -c "PATH=${PATH} ${1} $CODE_ROOT $OTP_ROOT $logfile" ||
	fatal "Error returned by make_release.script"

    if [ ! -f $RCS_HOME/releases/start_data ]; then
	fatal "No start_data -file created by make_release.escript"
    fi
}

#
# This function will secure early startup of ADK needed by IELL
#
start_npa_init() {
    HWBT=`cat /sys/rbs-fn/rbs-sys/board_type`
    TN_CXP_EXECUTABLE=`find $(ls -d ${RCS_HOME}/software/TN*CXP*/bin/${HWBT}hw/) -name npa-init.sh `
    TN_CXP=$( dirname $( dirname $( dirname $TN_CXP_EXECUTABLE) ) )
    TN_NPI_EXECUTABLE="bin/${HWBT}hw/npa-init.sh"

    # Strip revision from the CXP path for APP_TMP (was it intentional?)
    TN_CXP_NO_REV=$(echo ${TN_CXP} | sed 's/_[a-zA-Z0-9]*$//')
    TN_APP_PATH="/tmp/applicationtmp/$(basename ${TN_CXP_NO_REV})"

    [ ! -d $TN_APP_PATH ] && mkdir -m 777 $TN_APP_PATH
    if [ -e ${DEV_PATCHES}/${TN_NPI_EXECUTABLE} ]; then
        TN_PRG=${DEV_PATCHES}/${TN_NPI_EXECUTABLE}
    else
        TN_PRG=${TN_CXP}/${TN_NPI_EXECUTABLE}
    fi
	su sirpa -c "export MPID=$NlMpId;export CXP_PATH=$TN_CXP;export APP_TMP=${TN_APP_PATH};/sbin/pgh_spawn -s -q -e 0x1a ${TN_PRG}"
    return 0
}
#
# This function will start IELL programs on a DUS if they exist
#
start_iell() {

    #remove old presentBoards.txt.* file if exist
    [ -e ${TMMI} -o -e ${TMMI_BASE}   ] && rm ${TMMI_BASE}*

    if [ -e ${DEV_PATCHES}/IellStartParams.source ]; then
	iellparams=${DEV_PATCHES}/IellStartParams.source
    fi
    start_log "Using ${iellparams}"
    . ${iellparams}

    iell_bins=$(readlink -f ${RCS_HOME}/software/$IELL_BIN)
    IELL_CXP=$(dirname ${iell_bins})
    for prg in ${IELL_PGMS} ; do
	if [ -e ${DEV_PATCHES}/${prg} ]; then
	    IELL_PRG=${DEV_PATCHES}/${prg}
	else
	    IELL_PRG=${iell_bins}/${prg}
	fi
	su sirpa -c "export MPID=$NlMpId;export CXP_PATH=$IELL_CXP;/sbin/pgh_spawn -s -q -e 0x1a ${IELL_PRG}"
    done

    start_log "Start waiting for IELL - `date +%H:%M:%S.%N`"
    while [ ! -e  ${TMMI} ]
    do
	sleep  0.2
    done
    start_log "End waiting for IELL - `date +%H:%M:%S.%N`"

    if [ $NlMpId != "1" ]; then
	cnt=0
	boards=$(head -n 1 ${TMMI})
	if [ $boards == "MPID_MISMATCH" ]; then
	    revert_to_nl "MpId mismatch"
	else
	    if [ -e /rcs/networkloader/wait_for_core_time ]; then
		wfc=`cat /rcs/networkloader/wait_for_core_time`
	    else
		wfc=600
	    fi
	    while [ $boards == "1" -a "$cnt" -lt $wfc ]
	    do
		sleep 1
		cnt=$((cnt+1))
		boards=$(head -n 1 ${TMMI})
		kick_wd
	    done
	    [ "$cnt" -eq $wfc ] && revert_to_nl "Not regular"
	fi
    fi
    return 0
}

#
# This function will revert board to NL due to SW mismatch
#
revert_to_nl() {
    ${sys_arch_bin_path}/bootptr set nl3
    pgh_restartbrd -t $*"Revert to NL"
}

#
# This function will parse the file created by tmmi client
# and configure own cluster ip interface and arp cache
#
config_cluster_ip() {
    cat ${TMMI}
    while read boards
    do
	if [ $boards == "MPID_MISMATCH" ]; then
	    revert_to_nl "MpId mismatch"
	fi
	echo "Boards="$boards
	read ownMpId
	read availState
	read macEntries
	for m in $(seq 1 $macEntries)
	do
	    read traffType
	    read ifName
	    read vlan
	    read prio
	    read mac
	    if [ $traffType == "0" ]; then
		OwnIf=$ifName.$vlan
		ip address add $OwnIp/24 dev $OwnIf
	    fi
	done

	if [ $boards -gt 1 ]; then
	    for b in $(seq 2 $boards)
	    do
		read mpId
		read availState
		read macEntries
		for m in $(seq 1 $macEntries)
		do
		    read traffType
		    read ifName
		    read vlan
		    read prio
		    read mac
		    if [ $traffType ==  "0" ]; then
			FarDuId="du"$mpId
			Far_ip="169.254.3."$mpId
			arp -i $OwnIf -s  $Far_ip  $mac
		    fi
		done
	    done
	fi
    done < ${TMMI}
}



get_core_files() {
    tftp -g -r start_data     -l /tmp/start_data            169.254.3.1
    tftp -g -r cluster_config -l /home/sirpa/cluster_config 169.254.3.1
}

# If regular MP , compare SW version with core and if differ, revert to NL
compare_sw_version() {
    if ! diff /tmp/start_data /home/sirpa/releases/start_data; then
	revert_to_nl "SW version differ"
	exit 0
    fi
}

# Create a new /etc/hosts
make_hosts() {
    echo "127.0.0.1  $1 localhost  localhost.localdomain" > /etc/hosts
    for i in $(seq 1 64)
    do
	[ ! "$1" == "du$i" ] && echo "169.254.3.$i   du$i" >> /etc/hosts
    done
}

kick_wd() {
    echo x > $PGH_WDFN # to keep wd alive
}

# NOTE:
# mkdir without -p crashes bash (when executed from rc-script)
manage_erlang_log() {
    PRAM_ERLANG_DIR="/var/trace/erlang"
    ERLANG_DIR="/rcs/erlang"
    RCS_DIR="/rcs"
    if [ ! -d "${PRAM_ERLANG_DIR}" ]; then
	mkdir -p ${PRAM_ERLANG_DIR}
	NO=1
	KEEP=`ls -1tr ${ERLANG_DIR}/erlang.log.*| tail -4`
	for erlangfile in $KEEP
	do
	    Basename=`basename $erlangfile`
	    NEWFILENAME=${Basename%.*}.${NO}
	    cp -p ${erlangfile} ${PRAM_ERLANG_DIR}/${NEWFILENAME}
	    ((NO++))
	done
	rm -rf ${ERLANG_DIR}
	ln -s ${PRAM_ERLANG_DIR} ${RCS_DIR}
	chown -R ${RCS_USER_ID}:${RCS_USER_GID} ${PRAM_ERLANG_DIR}
    else
	# Just make sure that /rcs/erlang is a symlink to /var/trace/erlang
	if [ ! -h "${ERLANG_DIR}" ]; then
	    rm -rf ${ERLANG_DIR}
	    ln -s ${PRAM_ERLANG_DIR} ${RCS_DIR}
	fi
    fi
}

# Allow three mnesia core dumps
manage_mnesia_core() {
    MNESIA_CORE_DIR="/rcs/db/mnesia_cores/"
    NO=`ls -1t ${MNESIA_CORE_DIR}/* 2>/dev/null | wc -l`
    if [ "$NO" -gt 3 ]; then
	REMOVE=`ls -1t ${MNESIA_CORE_DIR}/* | tail -$((NO-3))`
	echo "REMOVE=$REMOVE"
	rm -f $REMOVE || true
    fi
}

# Check /rcs disk and makes sure that at least 25M is available.
check_disk() {
    SIZE=`df -m /rcs | grep rcs | awk '{ print $4 }'`
    if [ "$SIZE" -lt 25 ]; then
        # Removes in the following ORDER
	ORDER=(
	    "/rcs/applicationlogs/*CXP*/*"
	    "/rcs/comte/*"
	    "/rcs/fi/*"
	    "/rcs/saf_log/*/*"
	    "/rcs/log/*/*"
	    "/rcs/bootlogs/*"
	    "/rcs/sftp/rop/*"
	    "/rcs/networkloader/esi*.gz"
	    "/rcs/networkloader/esi*.gz.gpg"
	    "/rcs/erlang_disk/erl_crash_dump.*"
	)
	for Dir in "${ORDER[@]}"
	do
	    SIZE=`df -m /rcs | grep rcs | awk '{ print $4 }'`
	    if [ "$SIZE" -lt 25 ]; then
		echo_log "Disk /rcs is almost full; removing $Dir"
		rm -rf $Dir || true
	    else
		break
	    fi
	done
    fi
}

# Allow three erl_crash_dumps
# Remove any erl crash dumps in /rcs/erlang/
manage_erl_crash_dumps() {
    rm -f $ERLANG_LOG_DIR/erl_crash_dump.* || true
    NO=`ls -1t ${ERLANG_DISK_DIR}/erl_crash_dump.* | wc -l`
    if [ "$NO" -gt 3 ]; then
	REMOVE=`ls -1t ${ERLANG_DISK_DIR}/erl_crash_dump.* | tail -$((NO-3))`
	rm -f $REMOVE || true
    fi
}

function insert_readme() {
  local -r sysEtc=$1/etc
  local -r marker='===end=of=header===do=not=edit=this=line==='
  sed -e "1,/$marker/d" $sysEtc/README-dev_patches.txt >${DEV_PATCHES}/README.txt
}

###############################################################################
############################# Main MAIN main ##################################
###############################################################################
set -e #exit if command returns error. Note: Use "|| true" to ignore
#set -u #exit if a variable is unset

# To debug rcs_start script one can stop here if wait_start file exists
if [ -e ${RCS_HOME}/wait_start ]; then
    while [ -e ${RCS_HOME}/wait_start ]
    do
	sleep 10
	kick_wd
    done
elif [ -e ${RCS_HOME}/once_wait ]; then
    touch ${RCS_HOME}/wait_start
fi

# Disable IP forwarding for default name space. LMT port is placed in default
# name space and LMT port should have disabled IP forwarding (security).
# Transport will enable IP forwarding for other name spaces.
sysctl -w net.ipv4.ip_forward=0

umask 022
echo_log "Running ${PROG_NAME}"
if [ -e /rcs/networkloader/mpid ];then
    NlMpId=`cat /rcs/networkloader/mpid`
else
    NlMpId="1"
fi
DuId="du"$NlMpId
OwnIp="169.254.3."$NlMpId
echo $DuId >/etc/hostname
hostname $DuId
export MPID=$NlMpId


set -- $(get_id_gid)
RCS_USER_ID=$1
RCS_USER_GID=$2

if [ -s ${DEV_PATCHES}/otp.tar.gz ]; then
    ( cd ${DEV_PATCHES}
	if [ -d OTP ]; then
	    echo_log "OTP already unpacked"
	else
            mkdir OTP > /dev/null  2>&1
            cd OTP
            tar xf ../otp.tar.gz
	fi
    )
    otp_dir=${DEV_PATCHES}/OTP
else
    otp_dir=$(resolve_dir_path "${resolve_otp}")
fi

is_lab && {

    if [ -x $LAB_ADAPTION ]; then
	echo_log "Found lab adaption, applying..."
	$LAB_ADAPTION
	echo_log "Lab adaption exit status: $?"
    fi
}

#Watchdog func., PGH_WDFN set by EE, exported here for use in sysInitServer/lg
# PGH_WDFN="/tmp/wd" # for test
if [ -n ${PGH_WDFN:-""} ]; then
    export PGH_WDFN
fi

cd ${RCS_HOME} || fatal "Failed to change directory: ${RCS_HOME}"

# only relevant for SIM #export RCS_ROOT=/ #Nooooooooo
export RCS_ROOT=/ # used in e.g. sysdb
export RCS_MODE=target
export OTP_ROOT=$otp_dir
export SNAME=${RCS_USER}
export RCS_COOKIE=rcs
export HOST=du1
echo_log OTP_ROOT=$OTP_ROOT
# S10middleware part ends here
###############################################################################
# rest is from start_rcs.sh
export CODE_ROOT=${RCS_HOME}/software
export PIPE_DIR=/tmp

# Make sure that /rcs disk has at least 25M before continue.
# This is to avoid crashes at startup due to full disk and by that
# avoid to fall down to NL.
check_disk

logfile=${ERLANG_LOG_DIR}/start_rcs.log

create_directories ${PIPE_DIR}/${SNAME}@${HOST} \
	${RCS_HOME}/bin ${RCS_HOME}/login_env ${XCM_OBSERVABILITY}

# Fix erlang files to pram and set number of erlang.log.x:s
manage_erlang_log

# Limit the number of erl_crash_dump files
manage_erl_crash_dumps

# Limit the number of mnesia cores
manage_mnesia_core

export RUN_ERL_LOG_GENERATIONS=5
export RUN_ERL_LOG_MAXSIZE=1000000

rotate_startlog $logfile
print_home_dir_files
# Redirect all stdout/stderr to ${logfile}
exec >> ${logfile} 2>&1

# Run in debug mode
set -x

SYS_DIR=$(resolve_dir_path "${resolve_sys}/priv")

sys_priv_path=${SYS_DIR}/bin
sys_arch_bin_path=${SYS_DIR}/tgt_${ARMDIR}/bin

# Do some lttng logging in the restart log
#
${sys_arch_bin_path}/restart_trace "rcs_start started"


envSrcFile=${sys_priv_path}/mw.lab_env
envDstFile=${RCS_HOME}/login_env/mw.lab_env

if [ -f  $envSrcFile ];then
    if [ ! -f $envDstFile ];then
	cp -f $envSrcFile $envDstFile
    fi
else
    envfile=$envDstFile
    echo "alias to='/home/sirpa/software/*RCS*MW*/*CXC*/otp*/priv/tgt*/bin/to_erl /tmp/sirpa*/'" > $envfile
    echo "alias ll='ls -l'" >> $envfile
    echo "alias sirpa='su -l sirpa'" >> $envfile
fi


# enable COM to use lttng linking
export COM_LD_PRELOAD="libcom_trace_probe.so"

#check_fix_path
PATH=${OTP_ROOT}/bin:${RCS_HOME}/bin:${PATH}


if [ ! -f $RCS_HOME/install_complete ]; then
    if patch=$(find_patch ${sys_priv_path}/make_release.escript) &&
	[ -x $patch ]; then
	start_log "Patched version $patch of "\
	    "${sys_priv_path}/make_release.escript found, using it!"
	create_release $patch
    else
	create_release ${sys_priv_path}/make_release.escript
    fi
fi

#source to get RCS_VERSION and RCS_SYSTEM
. $RCS_HOME/releases/start_data


RELEASES_DIR=${RCS_HOME}/releases/${RCS_VERSION}

CXPs=$(ls -1 ${RCS_HOME}/software | grep -v RCSMW- | grep -v .xml )
for CXP in $CXPs
do
    #these are documented in APPM (LMHI) (environment is exported from there)
    #possibly trouble if EE are serious in shrinking /tmp -> 1Meg /lg
    create_directories /rcs/applicationlogs/${CXP%_*}
    create_directories /tmp/applicationtmp/${CXP%_*}
    #Mount tmpfs to limit the size of the application tmp directories
    mount_tmpfs /tmp/applicationtmp/${CXP%_*}
done

# directory for EMCA dumps
create_directories /rcs/dumps/appdump
chmod 777 /rcs/dumps/appdump
export DUMP_DIR=/rcs/dumps/appdump

# clean /rcs/dumps/[0-9]* (old place for pmds)
rm -rf /rcs/dumps/[0-9]*

# Persistent directory (used by IELL)
create_directories /rcs/persistent
chmod 777 /rcs/persistent

# consul log directory on BPU
[ -e /usr/bin/consul ] &&
{
    [ ! -d /var/log/consul ] &&
    {
	mkdir /var/log/consul 
	chmod 777 /var/log/consul
    }
}

# To avoid errors when tar:ing /var/log at ESI
chmod o+r /var/log/*

# Not used any longer - removed.
# Intermittent problem for the 'tar' command on TCU (make_release.escript).
# Tries sometimes to change utime, but fails because root is owner.
# create_directories ${RELEASES_DIR}/libs/arm ${RELEASES_DIR}/cslibs/arm

#this is read by sysEnv:library_root()
export RCS_LIB_ROOT=${RELEASES_DIR}/libs/
export RCS_LIB_DIR=${RCS_LIB_ROOT}/arm



symlink_file ${SYS_DIR}/bin/rcsapp.sh ${RCS_HOME}/bin/
symlink_file ${SYS_DIR}/bin/rcs_reboot.sh ${RCS_HOME}/bin/
symlink_file ${SYS_DIR}/tgt_${ARMDIR}/bin/pgh_restart_board ${RCS_HOME}/bin/

insert_readme ${SYS_DIR}

###
###  The following is for Cluster support and only valid on DUS boards
###
has_iell &&
{
	if [ "$DuId" == "du1" ]; then
	    create_directories  ${RCS_HOME}/tftproot
	    ln -sf ${RCS_HOME}/releases/start_data ${RCS_HOME}/tftproot/
	    ln -sf ${RCS_HOME}/cluster_config ${RCS_HOME}/tftproot/
	fi
	make_hosts $DuId
	TMMI_BASE=/tmp/presentBoards.txt
	TMMI=${TMMI_BASE}.2
	set +e
	start_npa_init
	start_iell
	R=$?
	set -e
	if [ $R -eq 0 ]; then
	    config_cluster_ip
	    if [ "$DuId" != "du1" ]; then
		get_core_files
		compare_sw_version
		export MP_ROLE=regular
	    else
		export MP_ROLE=active
	    fi
	    export OWN_CLUSTER_IF=${OwnIf}
	fi

}


#
# Note! If you change the HEART_COMMAND, you must update appmServer
# which set this string also (i.e removes -e option after a while)
# Added 'sleep 20' to give EE time to generate pmds /etxarnu
HEART_CMD="sleep 20;pgh_restart_board -e -r 'Unexpected restart'"

export HEART_COMMAND="\
  ${sys_priv_path}/restart_hook.sh ;\
  $HEART_CMD "

# HEART_COMMAND is valid for a restart but gets
# overridden by swmServer during System Upgrade
# and by appmServer at cold_with_test restart
start_log "HEART_COMMAND set to: $HEART_COMMAND"

BOOT_FILE=${RCS_HOME}/releases/${RCS_VERSION}/${RCS_SYSTEM}-${RCS_VERSION}

### for testing with CT in ipv6 environment
if [ -e /rcs/ipv6_only ]; then
    PROTO_DIST=" -proto_dist inet6_tcp"
else
    PROTO_DIST=" "
fi



if
    cup -c 2>/dev/null
then
    # There is VC, the board is secure
    # HERE disable DEV_PATCHES when running secure
    \rm -rf ${DEV_PATCHES}/*
    export ERL_EPMD_ADDRESS=127.0.0.1 #epmd listens only on loopback
    run_cmd="erl -boot ${BOOT_FILE} -boot_var OTP_ROOT $OTP_ROOT \
        -boot_var CODE_ROOT $CODE_ROOT -sname $SNAME -setcookie $RCS_COOKIE -heart \
        -async_shell_start -smp enable \
        -env ERL_CRASH_DUMP $ERLANG_DISK_DIR/erl_crash_dump.`date +%T` \
        -env ERL_CRASH_DUMP_BYTES 104857600 \
        -env ERL_CRASH_DUMP_SECONDS 1800 \
        -env HEART_BEAT_TIMEOUT 120 \
        $PROTO_DIST \
       -config ${RCS_HOME}/releases/${RCS_VERSION}/sys.config \
        +W w +A 64 +K true  +d +sbwt none +C multi_time_warp"
else
    run_cmd="erl -boot ${BOOT_FILE} -boot_var OTP_ROOT $OTP_ROOT \
        -boot_var CODE_ROOT $CODE_ROOT -sname $SNAME -setcookie $RCS_COOKIE -heart \
        -async_shell_start -smp enable \
        -env ERL_CRASH_DUMP $ERLANG_DISK_DIR/erl_crash_dump.`date +%T` \
        -env ERL_CRASH_DUMP_BYTES 104857600 \
        -env ERL_CRASH_DUMP_SECONDS 1800 \
        -env HEART_BEAT_TIMEOUT 120 \
        -config ${RCS_HOME}/releases/${RCS_VERSION}/sys.config \
        -pa ${DEV_PATCHES} \
        +W w +A 64 +K true +Bi +d +sbwt none +C multi_time_warp"
fi

start_log "run_cmd=  $run_cmd"

#these are "autoset" by "su"
# export USER=$RCS_USER
# export HOME=/home/$RCS_USER

if [ -e ${RCS_HOME}/no_mw ]; then
    while [ -e ${RCS_HOME}/no_mw ]
    do
	sleep 10
	kick_wd
    done
elif [ -e ${RCS_HOME}/once_mw ]; then
    touch ${RCS_HOME}/no_mw
fi

#
ulimit -n 2048

${sys_arch_bin_path}/restart_trace "rcs_start ready, starting erlang"
su $RCS_USER -c "PATH=${PATH} \
    run_erl -daemon ${PIPE_DIR}/${SNAME}@${HOST}/ $ERLANG_LOG_DIR \"$run_cmd\""
