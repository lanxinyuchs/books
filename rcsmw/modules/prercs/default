#%Module1.0
# **********************************************************************
#
# Short description:
# Pre "arch", tool initiation step of shell for WAF
#
# **********************************************************************
#
# %CCaseCopyrightBegin%
# Copyright (c) Ericsson AB 2016 All rights reserved.
# 
# The information in this document is the property of Ericsson.
# 
# Except as specifically authorized in writing by Ericsson, the 
# receiver of this document shall keep the information contained 
# herein confidential and shall protect the same in whole or in 
# part from disclosure and dissemination to third parties.
# 
# Disclosure and disseminations to the receivers employees shall 
# only be made on a strict need to know basis.
# %CCaseCopyrightEnd%
#
# **********************************************************************
#
# Rev        Date       Name        What
# -----      -------    --------    --------------------------
# A          2016-12-14 etxbjca     Created
#
# **********************************************************************

module-whatis 	"Pre RCS (common) setup"

# local variables
set projtop		/proj/5G_rcs
set cachetop		$projtop/cache
set 3pptop		$projtop/3pp
#set protoctop		$3pptop/proto-c_rev1
set dotfile		$env(HOME)/.DCI

# Check if already in repo
if { ! [catch {exec git rev-parse --git-dir 2> /dev/null}]} {
    # Get topdir
    catch {exec git rev-parse --show-toplevel} topdir
} else {
    # Change to "DCITOP", if default DCI setup exist
    if { [info exists env(DCITOP)]} {
	set dcitop	$env(DCITOP)
    } elseif { [file exists $dotfile]} {
	set dcitop 	[exec cat $dotfile]
    } 
    if { [info exists dcitop]} {
	if { ! [catch {exec cd $dcitop && git rev-parse --git-dir 2> /dev/null}]} {
	    # Get topdir
	    catch {exec git rev-parse --show-toplevel} topdir
	}
    }

}
# Define env's and path's when topdir exist
if { [info exists topdir]} {
    set rcttop		$topdir/test
    set mpdtop		$topdir/tools/3pp/mpDtdParser_rev1
    set rcsmodtop      	$topdir/modules
    
    # General env's
    setenv RCS_TOP	$topdir
    setenv RCT_TOP     	$rcttop
    setenv MPDTOP      	$mpdtop
    setenv TOPDIR      	$topdir

    # Set PATH
    prepend-path PATH    $mpdtop
    prepend-path PATH    $rcttop/bin
    prepend-path PATH    $topdir/tools/bin

    # Update AFS module path to current topdir
    module use $rcsmodtop

    # Alias
    set-alias rcsmw	"cd $topdir"

} else {
    puts stderr "Warning: Default DCI setup does not exist!"
}

# Set ENV's
setenv RCSMWCACHE	$cachetop
setenv RCSMW3PP		$3pptop

# Default RACF settings
set 	pdi_user       	rcsci1
setenv 	SSO_USER       	$pdi_user
setenv 	RACF_USER      	$pdi_user
setenv 	PRIVATE_D      	$env(HOME)/private

# Set aliases
set-alias gitlog	"git log --pretty=format:'%h : %s' --graph"
set-alias gitst		"git status"
set-alias gitdist	"git diff --stat"
set-alias gitlogs	"git log --pretty=oneline --no-merges"
set-alias gitrem	"git fetch; git checkout -B master origin/master"
set-alias gitcfr	"git checkout -B master origin/master; git fetch; git rebase -i origin/master"
set-alias gitrebem	"git fetch; git rebase -i origin/master"
set-alias gitpushm	"git push origin HEAD:refs/for/master"
set-alias gitrebed	"git fetch; git rebase -i origin/dev"
set-alias gitpushd	"git push origin HEAD:refs/for/dev"

set-alias tree		"find . -print | sort | sed -e \"s:\[^/\]*/:|---- :g\" -e \"s/---- |/   |/g\""
set-alias mosh		"/app/moshell/latest/moshell/moshell -v 'comcli=21,username=expert,password=expert,linux_username=root,linux_password=root'"

# Needed modules for the development environment
module load	\
    		make/4.1 \
    		protobuf-c \
    		/env/rbsg2/modules/ci-tools \
		OTP \
    		python/2.7.11 \
		coverity/7.6.1-static \
		qemu/2.4.1 \
		netcat/0.7.1-static \
    		openssh/7.4p1 \
    		gcc/4.5.1

# Emacs support
# Local Variables:
# mode:tcl
# End:
