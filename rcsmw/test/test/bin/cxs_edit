#! /bin/bash
##
## %CCaseFile:	cxs_edit %
## %CCaseRev:	/main/R2A/R4A/R8A/2 %
## %CCaseDate:	2017-01-03 %
## Author: <name>, <e-mail address>
##
## Purpose: Edit a CXS interactively. Expands the CXS content to
## temporary filespace, allows interactive editing, and repacks the
## CXS. A schema validity check is made on the *-up.xml metadata file.
## Correct references to constituent CXPs is not validated.
##
## The given CXS is overwritten; no backup is created.
##
## In the temporary file tree the cxp_edit script can be used to
## interactively edit one or more of the CXPs.
##
## If the -r (readonly) option is given the given CXS is not updated.
##
## The -e option implies non-interactive use where an editor script
## is applied to a specified CXP.
##
## Dependencies: cxp_edit
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2014-2017 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------------------
##
## Revision history:
##
## Rev        Date       Name        What
## -----      -------    --------    ------------------------------------
## R2A/1      2014-01-16 erarafo     First version
## R2A/2      2014-02-27 erarafo     Bugfix
## R2A/3      2014-03-10 erarafo     Scripting support
## R8A/1      2016-11-01 erarafo     Accepting .zip compression too
## R8A/2      2017-01-03 erarafo     Support for board lists
## ----------------------------------------------------------------------


# Script name
declare -r Script=cxs_edit

# Script directory
declare -r ScriptDir=`dirname $0`


# Constants
declare -r TempRoot=/repo/$USER
declare -r CxsSchema=$RCS_TOP/SWM/SWM_CXA11423/schema/SwConfig.xsd


function help() {
  cat <<EOF
Usage is: $Script -f CXS_FILE

An xterm session is launched in which the expanded CXS can be
inspected and modified. If the -e option is given the cxp_edit
script is launched instead.

Options are:
  -e SCRIPT ARGS...    modification script; must be the last option
  -n                   CXP product name prefix, required when -e given
  -N                   CXP filename prefix, defaults to the -n option value
  -f                   CXS file
  -h                   this help
  -r                   readonly

The prefixes must be sufficiently unique. Two separate prefixes
are required since the CXP filename does not have to match the
CXP product name.

The -e and -r options are mutually exclusive.
EOF

}

# Print string to stderr and exit nonzero
function die() {
  printf "$Script: FATAL: $1\n" >&2
  exit 1
}

# Print string to stderr as info message
function info() {
  printf "$Script: INFO: $1\n" >&2
}

# Print string to stderr as warning
function warning() {
  printf "$Script: WARNING: $1\n" >&2
}

function metadataFiles() {
  find . -maxdepth 1 -type f '(' -name '*-up.xml' -o -name 'cxs*.xml' ')'
}

function metadataCheck() {
  local count=`metadataFiles | wc --lines`
  if [[ $count -lt 1 ]]; then
    warning "no metadata file named *-up.xml or cxs*.xml"
    false
  elif [[ $count -gt 1 ]]; then
    warning "multiple metadata files: `metadataFiles | tr '\n' ' '`"
    false
  else
    local file=`metadataFiles`
    if ! command -v xmllint >/dev/null; then
      warning "cannot find validation tool: xmllint"
      true
    elif [[ ! -r $CxsSchema ]]; then
      warning "cannot find schema: $CxsSchema"
      true
    elif xmllint -schema $CxsSchema $file >/dev/null 2>&1; then
      info "successful schema validation for $file"
      true
    else
      warning "schema validation failure -"
      xmllint -schema $CxsSchema $file >/dev/null
    fi
  fi
}






########################################################################
# Execution begins here


declare OptionPatterns=""
OptionPatterns+="e:"
OptionPatterns+="f:"
OptionPatterns+="h"
OptionPatterns+="n:"
OptionPatterns+="N:"
OptionPatterns+="r"

declare ModScript="/"
declare CxsFile="/"
declare ProdPfx="/"
declare CxpFilePfx="/"
declare ReadOnly=false
while getopts $OptionPatterns OPT; do
  case "$OPT" in
    e)
      ModScript="$OPTARG";;
    f)
      CxsFile="$OPTARG";;
    h)
      help
      exit;;
    n)
      ProdPfx="$OPTARG";;
    N)
      CxpFilePfx="$OPTARG";;
    r)
      ReadOnly=true;;
    *)
      die "Unknown option, try -h for help"
  esac
done

shift $((OPTIND - 1))


if [[ "$ModScript" != "/" ]]; then
  if [[ "$ProdPfx" == "/" ]]; then
    die "missing product name prefix, -h for help"
  elif [[ $Readonly == true ]]; then
    die "mutually exclusive: -e and -r, -h for help"
  elif [[ ! -f "$ModScript" ]]; then
    die "cannot find: $ModScript"
  fi

  if [[ "$CxpFilePfx" == "/" ]]; then
    CxpFilePfx=$ProdPfx
  fi

  declare -r AbsModScript=`readlink -f $ModScript`
  if [[ ! -x $AbsModScript ]]; then
    die "cannot execute: $AbsModScript"
  fi
fi


if [[ $# -gt 0 && "$ModScript" == "/" ]]; then
  die "arguments not allowed, -h for help"
fi

if [[ "$CxsFile" == "/" ]]; then
  die "CXS file not specified, -h for help"
elif [[ -z "$CxsFile" ]]; then
  die "CXS file cannot be an empty string"
fi


declare -r Cxs=$CxsFile


mkdir -p $TempRoot

if [[ ! -e $Cxs ]]; then
  die "does not exist: $Cxs"
elif [[ ! -r `readlink -f $Cxs` ]]; then
  die "cannot read: $Cxs"
else
  if [[ $ReadOnly == false && ! -w `readlink -f $Cxs` ]]; then
    if ! chmod +w `readlink -f $Cxs`; then
      die "cannot make writable: $Cxs"
    fi
  fi
fi



declare -r AbsCxs=`readlink -f $Cxs`

cd $TempRoot

mkdir -p $$
cd $$
info "using working directory: `readlink -f .`"


if file $AbsCxs | grep --silent 'Zip archive'; then
  if ! unzip -q $AbsCxs; then
    die "zipfile expansion failed"
  else
    info "zipfile expanded"
  fi
elif file $AbsCxs | grep --silent 'gzip compressed'; then
  if ! tar -xzf $AbsCxs; then
    die "tar.gz expansion failed"
  else
    info "tar.gz file expanded"
  fi
else
  die "cannot expand: $AbsCxs, type: `file $AbsCxs`"
fi



metadataCheck

if [[ $ReadOnly == true ]]; then
  info "Inspect the content in the shell window; exit when done"
else
  info "Edit CXS content in the newly opened shell window; exit when done"
fi

if [[ "$ModScript" != "/" ]]; then

  # Hope we get just one hit here...
  declare CxpFile=`find . -mindepth 1 -maxdepth 1 -type f -name "${CxpFilePfx}*"`

  if [[ -z "$CxpFile" ]]; then
    warning "no CXP file matches prefix: $CxpFilePfx"
  elif [[ `echo $CxpFile | wc --word` -gt 1 ]]; then
    warning "multiple CXP files match prefix: $CxpFilePfx"
  else
    cxp_edit -f $CxpFile -e $AbsModScript $*
    sed \
      -i \
      -e "/<configuration/,/<date>/s|'|"'"'"|g" \
      -e '/<configuration/,/<date>/s|version="\([^"]*\)"|version="\1E"|' \
      -e "/<contentinfo>/,/<\/contentinfo>/s|'|"'"'"|g" \
      -e '/<contentinfo>/,/<\/contentinfo>/s|\(name="'$CxpFilePfx'[^"]*".*\)version="\([^"]*\)"|\1version="\2E"|' \
      -e "/<boardList.*>/,/<\/boardList>/s|'|"'"'"|g" \
      -e '/<boardList.*>/,/<\/boardList>/s|\(name="'$CxpFilePfx'[^"]*".*\)version="\([^"]*\)"|\1version="\2E"|' \
      *-up.xml
  fi
else
  xterm -e tcsh
fi


if [[ $ReadOnly == true ]]; then
  true
else
  if ! metadataCheck; then
    warning "your CXS may not be installable"
  fi
  info "please wait while the CXS is repacked..."
  tar -czf $AbsCxs *-up.xml *.cxp
  info "repacked the CXS"
fi

cd ..
info "removing working directory: `readlink -f $$`"
rm -rf $$

if [[ $ReadOnly == true ]]; then
  true
else
  info "done; your CXS is in $AbsCxs"
fi
