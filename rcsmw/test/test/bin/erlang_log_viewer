#! /bin/bash
##
## %CCaseFile:	erlang_log_viewer %
## %CCaseRev:	/main/R2A/1 %
## %CCaseDate:	2014-01-17 %
## Author: <name>, <e-mail address>
##
## Purpose: Viewing an Erlang log.
##
## Dependencies:
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2014 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------------------
##
## Revision history:
##
## Rev        Date       Name        What
## -----      -------    --------    ------------------------------------
## R2A/1      2014-01-17 erarafo     First version
## ----------------------------------------------------------------------


# Script name
declare -r Script=erlang_log_viewer

# Script directory (not used)
# declare -r ScriptDir=`dirname $0`

function help() {
  cat <<EOF
Usage is: elv [OPTIONS] [FILE]

General options:
  -h       this help

Source options:
  -S           look for log at default rcssim path

Filtering options:
  -c           suppress CRASH reports
  -e           suppress ERROR reports
  -i           suppress INFO reports
  -p           suppress PROGRESS reports
  -s           suppress SUPERVISOR reports
  -w           suppress WARNING reports

Output options:
  -E           load output into editor

If the given FILE is '-' then standard input is used.
The -S option and the FILE argument are mutually exclusive.

EOF
}

# Print string to stderr and exit nonzero
function die() {
  printf "$Script: FATAL: $1\n" >&2
  exit 1
}

# Print string to stderr as info message
function info() {
  printf "$Script: INFO: $1\n" >&2
}

# Print string to stderr as warning
function warning() {
  printf "$Script: WARNING: $1\n" >&2
}



########################################################################
# Execution begins here

# Below is a skeleton for options processing, remove if not needed

declare OptionPatterns=""
OptionPatterns+="E"
OptionPatterns+="S"
OptionPatterns+="c"
OptionPatterns+="e"
OptionPatterns+="h"
OptionPatterns+="i"
OptionPatterns+="p"
OptionPatterns+="s"
OptionPatterns+="w"

declare File=""
declare Editor=false
declare SuppressCrash=false
declare SuppressError=false
declare SuppressInfo=false
declare SuppressProgress=false
declare SuppressSupervisor=false
declare SuppressWarning=false

while getopts $OptionPatterns OPT; do
  case "$OPT" in
    E)
      Editor=true;;
    S)
      File=/local/scratch/$USER/RCS_ROOT/rcs/erlang/erlang.log.1;;
    c)
      SuppressCrash=true;;
    e)
      SuppressError=true;;
    h)
      help; exit;;
    i)
      SuppressInfo=true;;
    p)
      SuppressProgress=true;;
    s)
      SuppressSupervisor=true;;
    w)
      SuppressWarning=true;;
    *)
      die "Unknown option, try -h for help"
  esac
done

shift $((OPTIND - 1))

if [[ $# -gt 1 ]]; then
  die "too many arguments, try -h for help"
fi


if [[ $# -eq 1 ]]; then
  if [[ -n "$File" ]]; then
    die "using file: $File; argument not allowed"
  else
    File="$1"; shift
  fi
fi


if [[ -z "$File" ]]; then
  die "no file specified; try -h for help"
fi

declare SedOptions="-f /dev/null"

if [[ $SuppressCrash == true ]]; then
  SedOptions+=" -e /=CRASH.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi

if [[ $SuppressError == true ]]; then
  SedOptions+=" -e /=ERROR.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi

if [[ $SuppressInfo == true ]]; then
  SedOptions+=" -e /=INFO.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi

if [[ $SuppressProgress == true ]]; then
  SedOptions+=" -e /=PROGRESS.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi

if [[ $SuppressSupervisor == true ]]; then
  SedOptions+=" -e /=SUPERVISOR.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi

if [[ $SuppressWarning == true ]]; then
  SedOptions+=" -e /=WARNING.REPORT====/{ -e :R -e /=END.===/!{ -e N -e bR -e } -e d -e }"
fi


declare TempFile

if [[ $Editor == false ]]; then
  cat $File \
  | tr -d '\r' \
  | sed $SedOptions \
  | cat -s
else
  TempFile=`mktemp -u --tmpdir=/tmp $USER-XXXXXXXX`
  cat $File \
  | tr -d '\r' \
  | sed $SedOptions \
  | cat -s \
  > $TempFile
  (${EDITOR:-emacs} $TempFile; rm -f $TempFile)&
fi
