#!/usr/bin/env python
import sys
import os
import re
import codecs
from argparse import ArgumentParser


###############################################################################
###                    Command line argument parsing                        ###
###############################################################################
def create_parser():
    """Creates parser for command-line arguments.

    Creates parser for processing command-line parameters.

    Returns:
        ArgumentParser: constructed parser of command-line parameters.
    """
    parser = ArgumentParser(description="Searches all log entries" +
        " that contain given SUBSTRING in one or more FILE or DIRECTORY")

    # add list of files option to parser
    parser.add_argument("-f", "--files", default=[], metavar="FILE",
        type=str, nargs="+", help="List of files")

    # add directory option to parser
    parser.add_argument("-d", "--dir", default=[""], metavar="DIRECTORY",
        type=str, nargs=1, help="Directory with files")

    # add string match option
    parser.add_argument("-m", "--match", default=[], metavar="SUBSTRING",
        type=str, nargs="+", help="List of substrings to match")

    return parser


def check_files(namespace):
    """Checks if given files exist and can be read.

    Checks if given files exist and can be read.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.

    Returns:
        True if everything is valid.
        String description of an invalid parameter.
    """
    files = namespace.files

    dir = namespace.dir[0]

    for path in files:
        path = os.path.join(dir, path)

        # check if path exists
        if not os.path.exists(path):
            return path + " does not exist."

        # check if path is file
        if not os.path.isfile(path):
            return path + " is not a file."

        # check if file is readable
        if not os.access(path, os.R_OK):
            return path + " is not readable."

    return True


def check_directory(namespace):
    """Checks if given directory exist.

    Checks if given directory exist.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.

    Returns:
        True if everything is valid.
        String description of an invalid parameter.
    """
    path = namespace.dir[0]

    # check if directory exist
    if path != "" and not os.path.exists(path):
        return path + " does not exist."

    return True


def check_regex(namespace):
    """Checks if given regex strings are regular expressions.

    Checks if given regex strings are regular expressions.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.

    Returns:
        True if everything is valid.
        String description of an invalid parameter.
    """
    regexes = namespace.match

    for regex in regexes:
        try:
            re.compile(regex)
        except:
            return regex + " is not regular expression."

    return True


def check_arg_count(namespace):
    """Checks the parameter count.

    Checks the parameter count.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.

    Returns:
        True if everything is valid.
        String description of an invalid parameter.
    """
    file_count = len(namespace.files)
    dir_count = len(namespace.dir)
    regex_count = len(namespace.match)

    if file_count == 0 and dir_count == 0:
        return "Please enter at least one file or directory."

    if regex_count == 0:
        return "Please enter at least one substring for matching data."

    return True


def check_all_args(namespace, check_functions=[]):
    """Check if command-line arguments are valid.

    Validates data given by command-line parameters.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.
        check_functions ([function]): list of functions that validate
            command-line arguments.

    Returns:
        True if all arguments are valid.
        String description of an error in case of invalid argument.
    """

    for check_function in check_functions:
        current_status = check_function(namespace)
        if current_status != True:
            return current_status

    return True


###############################################################################
###                       Paragraph processing                              ###
###############################################################################
def print_match_paragraph(paragraph, substrings):
    """Prints out paragraph that matches at least one substring.

    Prints out paragraph that matches at least one substring regular
    expression passed by substrings parameter.

    Args:
        paragraph (string): paragraph string.
        substrings (list): list of substring regular expressions

    Returns:
        1 if paragraph matches at least one of the substrings.
        0 if no match is found.
    """
    if paragraph == None or paragraph == "":
        return 0

    for substring_re in substrings:
        if substring_re.search(paragraph) is not None:
            print "%s\n" % paragraph
            return 1

    return 0


def find_matched_paragraphs(file_name, substrings):
    """Searches paragraphs in file that match some substring.

    Finds and prints all paragraphs that match at least one substring regex
    in substrings parameter.

    Args:
        file_name (string): name of the file that is going to be searched
        substrings (list): list of substring regular expressions

    Returns:
        Number of paragraphs that match at least one substring.
    """
    with codecs.open(file_name, "r", "utf-8") as fp:
        prev_line = ""
        paragraph_buffer = ""
        match_count = 0
        for line in fp:
            # stripped current line
            line_reduced = line.strip()

            # end of paragraph detection
            if prev_line == "" and line_reduced != "":
                match_count += print_match_paragraph(paragraph_buffer.rstrip(),
                    substrings)
                paragraph_buffer = ""

            # append to current buffer
            if line_reduced != "":
                paragraph_buffer += line

            prev_line = line_reduced

        match_count += print_match_paragraph(paragraph_buffer.rstrip(),
            substrings)

    return match_count


def process_data(namespace):
    """Searches one or multiple files for paragraphs that contain data given
    by command-line parameters

    Processes one or multiple files and searches all paragraphs that
    contain data from command-line parameters.

    Args:
        namespace (argparse.Namespace): namespace generated by ArgumentParser.
    """
    files = namespace.files
    directory = namespace.dir[0]
    matches = [re.compile(m, re.MULTILINE) for m in namespace.match]

    # if no files are given than all files from dir and subdirs are included
    if len(files) == 0:
        for (dir_path, dir_name, file_name) in os.walk(directory):
            files.extend(file_name)

    file_count = 0
    match_count = 0
    for file_name in files:
        full_file_name = os.path.join(directory, file_name)

        # find matches in current file
        current_match_count = find_matched_paragraphs(file_name, matches)

        if current_match_count > 0:
            match_count += current_match_count
            file_count += 1

    print "\nFound %d matches in %d file(s)" % (match_count, file_count)
    return


###############################################################################
###                         Main function                                   ###
###############################################################################
def main():
    # create parser for command-line arguments
    parser = create_parser()

    # parse arguments
    namespace = parser.parse_args()

    #specify check funtions for arguments
    check_funs = [
                    check_arg_count,
                    check_files,
                    check_directory,
                    check_regex,
                 ]

    # validate command-line parameters
    check_msg = check_all_args(namespace, check_funs)

    # print error message
    if check_msg != True:
        parser.print_help()
        print "\n%s\n" % check_msg
        return

    process_data(namespace)


#enter main function if this is main script
if __name__ == "__main__":
    main()

