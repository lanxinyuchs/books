#!/usr/bin/env expect
## ----------------------------------------------------------
## Copyright (c) Ericsson AB 2015 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## ----------------------------------------------------------
## #1.    REVISION LOG
## ----------------------------------------------------------
## Rev        Date         Name        What
## --------   --------     --------    ------------------------
## R2A/1      2012-02-20   etxkols     Created
## R3A/1      2015-03-23   etxkols     Fix for ARM
## ----------------------------------------------------------

proc usage {} {
    puts "rcs_check_power.exp Maxtemp"
    puts "Maxtemp:     Integer, Max allowed power in W."
    puts "Description: Scans HW in lab and reads power."
    puts "             If power > Maxpower for any HW, script exits with 1"
    puts "             If HW cannot be reached, 0 is printed"
    puts "Example:     rcs_power.exp 110"
    exit 1
}

if { $argc != 1 } {
    usage
}
set MAXPOWER [lindex $argv 0]
set USER "root"
set PASSWORD "root"
set TIMEOUT 2

set timeout $TIMEOUT
log_user 0
proc cmd {Ip Cmd} {
    global USER PASSWORD
    spawn ssh ${USER}@${Ip} $Cmd
    match_max 5000
    expect {
        "Permission denied, please try again." {
            close
            wait
            return "no_login"
        }
        "Password:" {
            exp_send "${PASSWORD}\r"
            exp_continue
        }
        "password:" {
            exp_send "${PASSWORD}\r"
            exp_continue
        }
        "(yes/no)" {
            exp_send "yes\r"
            exp_continue
        }
        eof {
             wait
             return $expect_out(buffer)
        }
        "Connection refused" {
            close
            wait
            return "no_login"
        }
        "Connection closed by remote host" {
            close
            wait
            return "no_login"
        }
      "shell-init: error retrieving current directory:" {
            close
            wait
            return "no_login"
        }
        timeout {
            close
            wait
            return "no_login"
        }
    }
}


proc get {Ip Hwmons} {
    set Temp [string trim [cmd $Ip "cat $Hwmons"]]
    if { $Temp == "no_login"} {
	return 0
    } else {
	puts $Temp
	return [expr $Temp / 1000]
    }
}

set HOME $::env(HOME)
puts "rm -f ${HOME}/.ssh/known_hosts"
exec rm -f ${HOME}/.ssh/known_hosts
set File [exec cat /proj/webdocs/rbs-rde-wiki/root/data/Main/LabConfig.txt]
set Lines [split $File "\n"]
set Result 0
set FailedHosts ""
puts "MAXPOWER: $MAXPOWER W"
puts [format "%-15s %-15s %6s " "Name" "IP address" power]
set MAXPOWER [expr $MAXPOWER * 1000]

foreach Line $Lines {
    if ![string match %META* $Line] {

	if [string match *\*hw\** $Line] {
	    set Items [split $Line "|"]
	    set N [lsearch $Items *ssh_lmt_ipv4*]
	    set TypeN [lsearch $Items *type*]
	} else {
	    set Items [split $Line "|"]
	    set Host [lindex $Items 1]
	    set IP [lindex $Items $N]
	    set Type [string trim [lindex $Items $TypeN]]
	    if { $Type == "tcu03" || $Type == "dus5201" || $Type == "dus3201" || $Type == "tcu0401" } {
		if {[regexp {([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*} $IP matched IP2]} {
		    set Power [cmd $IP2 "bash -l -c \"/bin/rhdc bpm_power\""]
		    set Power [string trim $Power]
		    if { $Power == "bash: /bin/rhdc: No such file or directory" ||
			 $Power == "bpm_power: unknown command" ||
			 $Power == "no_login" ||
			 $Power == "ERROR: communication fault"} {
			set Power "0"
		    } else {
			set Power [string trimright $Power mW]
		    }

		    #puts [format "xxxxx %-15s  " $Power]
		    set FailedHost 0
		    if { $Power > $MAXPOWER } {
			set Result 1
			set FailedHost 1
		    }
		    if $FailedHost {
			set FailedHosts "$FailedHosts $Host"
		    }
		    puts [format "%-15s %-15s %6s " [string trim "$Host"] $IP2 $Power ]	    
		    
		}						
	    }		    		    
	}
    }
}

if $Result {
    puts "FAILED HOSTS (Power > $MAXPOWER W): $FailedHosts"

    set chan [open exit.txt w]
    close $chan

}
# exit $Result
