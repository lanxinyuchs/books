#! /bin/bash
##
## %CCaseFile:	rcs_cliexec %
## %CCaseRev:	/main/R2A/R3A/1 %
## %CCaseDate:	2014-11-10 %
## Author: <name>, <e-mail address>
##
## Purpose: Execute CLI commands from a file.
##
## Dependencies: This script uses:
##   $RCT_TOP/test/lib/shell/common.sh
##   rcssim_ssh
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2014 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------------------
##
## Revision history:
##
## Rev        Date       Name        What
## -----      -------    --------    ------------------------------------
## R2A/1      2014-08-07 erarafo     First version
## R2A/2      2014-08-16 erarafo     Fault fixed
## ----------------------------------------------------------------------


declare -r CliPort=2023


source $RCT_TOP/test/lib/shell/common.sh

declare -r Script=rcs_cliexec
declare -r ScriptDir=`dirname $0`

declare -r SimDirDefault=/local/scratch/$USER

function help() {
  cat <<EOF
NOTE: This script is deprecated, consider using 'rcs_exec' instead.

Purpose: Execute CLI commands from a file. Invoke as

  $Script [OPTIONS] NODE

where options are:

  -i DIR            simulator install directory, defaults to $SimDirDefault
  -f CLI_SCRIPT     CLI commands file
  -F                execute built-in CLI snippet
  -o EXPECT_SCRIPT  generate 'expect' script to file; do not execute
  -h                this help

The NODE is specified by a name such as tcu070, or 'sim' for a simulator
instance.

The -i option is effective only if '-n sim' is specified. It has the same
meaning as the -i option of the 'rcssim' command.

The -F option can be used to verify that the node responds to CLI properly
(-F causes -f to be ignored).

The -o option can be used to generate an 'expect' script for stand-alone
execution.

EOF
}


function die() {
  printf "$Script: FATAL: $1\n" >&2
  exit 1
}


function info() {
  printf "$Script: INFO: $1\n" >&2
}


function warning() {
  printf "$Script: WARNING: $1\n" >&2
}



########################################################################
# Execution begins here


warning "this script is deprecated, consider using 'rcs_exec' instead"


declare OptionPatterns=""
OptionPatterns+="h"
OptionPatterns+="f:"
OptionPatterns+="F"
OptionPatterns+="i:"
OptionPatterns+="o:"



declare CliScript=""
declare CliBuiltin=false
declare SimDir=$SimDirDefault
declare ExpectScriptTemp=`mktemp -u /tmp/${USER}_XXXXX`
declare ExpectScript=$ExpectScriptTemp
while getopts $OptionPatterns OPT; do
  case "$OPT" in
    h)
      help; exit;;
    f)
      CliScript=$OPTARG;;
    F)
      CliBuiltin=true;;
    i)
      SimDir=$OPTARG;;
    o)
      ExpectScript="$OPTARG";;
    *)
      die "Unknown option, try -h for help"
  esac
done

shift $((OPTIND - 1))

if [[ $# -gt 1 ]]; then
  die "too many arguments, type -h for help"
elif [[ $# -lt 1 ]]; then
  die "a node must be specified, type -h for help"
else
  declare -r Node="$1"; shift
fi

if [[ $CliBuiltin == true ]]; then
  info "executing some built-in CLI commands"
elif [[ -z "$CliScript" ]]; then
  die "CLI script not specified, try -h for help"
elif [[ ! -r "$CliScript" ]]; then
  die "cannot read: $CliScript"
fi

if [[ $CliBuiltin == true && -n "$CliScript" ]];then
  warning "ignoring option: -f"
fi

declare -r Addr=`getAddress "$Node"`

if [[ -z "$Addr" ]]; then
  die "could not resolve node name: $Node"
fi

if ! touch "$ExpectScript"; then
  die "cannot touch: $ExpectScript"
fi


if [[ $Node == sim ]]; then
  declare -r Port=`rcssim_ssh -P -i $SimDir/RCS_ROOT cli`
else
  declare -r Port=$CliPort
fi


declare -r SshOptions="-l expert -2 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"


cat <<EOF >"$ExpectScript"

spawn ssh $SshOptions -p $Port $Addr

expect "password:"
send "expert\r"

expect ">"
send "scriptmode --on\r"
expect ">"

EOF

if [[ $CliBuiltin == true ]]; then
  cat <<EOF >>"$ExpectScript"
send "ManagedElement=1,SystemFunctions=1,SwM=1\r"
expect ">"
send "show activeSwVersion\r"
expect ">"
send "exit\r"
EOF
else
  sed \
    -e 's|"|\\"|g' \
    -e 's|\[|\\[|' \
    -e 's|\]|\\]|' \
    -e 's|^|"|' \
    -e 's|$|\\r"|' \
    -e 's|^|send |' \
    -e 's|$|\nexpect ">"|' \
    $CliScript \
  >>"$ExpectScript"
fi


if [[ "$ExpectScript" != "$ExpectScriptTemp" ]]; then
  info "'expect' script generated to: $ExpectScript"
  info "To execute, type: expect $ExpectScript"
else
  expect "$ExpectScript"
  rm "$ExpectScript"
fi
