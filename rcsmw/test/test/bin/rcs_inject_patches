#! /bin/bash
##
## %CCaseFile:	rcs_inject_patches %
## %CCaseRev:	/main/R6A/2 %
## %CCaseDate:	2016-06-01 %
## Author: <name>, <e-mail address>
##
## Purpose: This script can be used to copy a set of files to the
## /home/sirpa/dev_patches directory on an unsecure board as soon
## as the board SSH service comes up.
##
## It is a quick-and-dirty way to insert e g patch-beams that are
## executed in the data install phase (coiMim.beam is an example).
##
## The action is best-effort and there is no strict guarantee that
## the files are injected before they are first accessed by RCS. The
## totally safe, but slower, alternative is to first copy the patch
## files to /home/sirpa/dev_patches and then use the COLI commands
## /misc/auth_level disabled followed by /sysm/sw -r.
##
## This script is only for target nodes. For the simulator the -P
## option can be used for patch files.
##
## Dependencies:
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2016 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------------------
##
## Revision history:
##
## Rev        Date       Name        What
## -----      -------    --------    ------------------------------------
## R6A/1      2016-05-30 erarafo     First version
## R6A/2      2016-06-01 erarafo     Verbose option added
## ----------------------------------------------------------------------

source $RCT_TOP/test/lib/shell/common.sh

declare -r Script=rcs_inject_patches
declare -r ScriptDir=`dirname $0`


function die() {
  printf "$Script: FATAL: $1\n" >&2
  exit 1
}

function warning() {
  printf "$Script: WARNING: $1\n" >&2
}

function info() {
  printf "$Script: INFO: $1\n" >&2
}


########################################################################
# Execution begins here

declare OptionPatterns=""
OptionPatterns+="h"
OptionPatterns+="v"

declare -r OptionXDefault=false
declare -r OptionYDefault="qwerty"


function help() {
  cat <<EOF
Usage is: $Script [OPTIONS] NODE PATCH1 PATCH2 ...

Options are:
  -h          this help
  -v          verbose

The node name is the name used with the 'reserve_node.sh' script
(e g dus1234 or tcu5678).

This script can only be used with unsecure boards.
EOF
}


declare Verbose=false
while getopts $OptionPatterns OPT; do
  case "$OPT" in
    h)
      help
      exit;;
    v)
      Verbose=true;;
    *)
      die "Unknown option, try -h for help"
  esac
done

shift $((OPTIND - 1))


# Expect a node

if [[ $# -lt 1 ]]; then
  die "no node specified, try -h for help"
fi

declare -r Node="$1"; shift
if [[ -n "`echo $Node | sed -e 's|[^/]||g'`" ]]; then
  die "does not seem to be a node: $Node"
fi


# Expect at least one file

if [[ $# -lt 1 ]]; then
  die "expecting at least one file, try -h for help"
fi


# Verify that all files are readable

for f in $*; do
  if [[ ! -f $f ]]; then
    die "not a file: $f"
  elif [[ ! -r $f ]]; then
    die "cannot read: $f"
  fi
done


# canPing Address Verbose

function canPing() {
  local ipAddress=$1; shift
  local verbose=$1; shift
  if [[ $Verbose == true ]]; then
    ping -q -n -c 1 -w 1 $ipAddress
  else
    ping -q -n -c 1 -w 1 $ipAddress >/dev/null 2>&1
  fi
}


declare -r NodeIp=`getAddress $Node`

info "attempting to inject files to node: $Node ($NodeIp), please be patient ..."

declare Count=$((0))
declare Done=false
while [[ $Done == false ]]; do
  Count=$((Count+1))
  if ! canPing $NodeIp $Verbose; then
    info "no ping response, retrying ..."
    sleep 2
  elif [[ $Verbose == true ]]; then
    if nodeScp $* $Node:/home/sirpa/dev_patches; then
      info "successfully injected files: $*"
      Done=true
    else
      info "SCP copying not done, retrying ..."
      sleep 3
    fi
  else
    if nodeScp $* $Node:/home/sirpa/dev_patches >/dev/null 2>&1; then
      info "successfully injected files: $*"
      Done=true
    else
      info "SCP copying not done, retrying ..."
      sleep 3
    fi
  fi
  if [[ $((Count % 10)) -eq 0 ]]; then
    info "attempting to inject files to node: $Node ($NodeIp), please be patient ..."
  fi
done
