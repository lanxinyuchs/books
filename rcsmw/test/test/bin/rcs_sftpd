#! /bin/bash
##
## %CCaseFile:	rcs_sftpd %
## %CCaseRev:	/main/R5A/3 %
## %CCaseDate:	2016-01-19 %
## Author: <name>, <e-mail address>
##
## Purpose: Lightweight SFTP daemon.
##
## Dependencies: Erlang, sftpd.beam, ssh_sftpd_wrapper.beam
##
## %CCaseCopyrightBegin%
## Copyright (c) Ericsson AB 2016 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## %CCaseCopyrightEnd%
##
## ----------------------------------------------------------------------
##
## Revision history:
##
## Rev        Date       Name        What
## -----      -------    --------    ------------------------------------
## R5A/1      2016-01-18 erarafo     First version
## R5A/2      2016-01-18 erarafo     Fixed the inevitable bug
## R5A/3      2016-01-19 erarafo     Fixed order of beam directories
## ----------------------------------------------------------------------


declare -r PortBase=27700


function ownAddressHeuristic() {
  if command -v /sbin/ifconfig >/dev/null && \
     [[ `/sbin/ifconfig | sed -e '/inet addr/!d' -e '/inet addr:127\./d' | wc -l` == 1 ]]; then
    /sbin/ifconfig \
    | sed -e '/inet addr/!d' -e '/inet addr:127\./d' -e 's|.*inet addr:||' -e 's| .*||'
  else
    echo OWN_ADDRESS_UNKNOWN
  fi
}

function portInUse() {
  local port=$1
  [[ -n "`netstat --tcp --numeric --listening | sed -e '/^[^:]*:'$port' /!d'`" ]]
}

function queryPort() {
  local port=$1
  if ! portInUse $port; then
    info "port $port is not in use"
  else
    netstat --tcp --numeric --listening | sed -e "/^[^:]*:$port /!d"
  fi
}

function portDefault() {
  local -r user=$1
  local -r offset=`echo $user | md5sum | sed -e 's|^..........\(..\).*|\1|'`
  echo $((PortBase + 16#${offset}))
}

function intHandler() {
  printf "\n"
  kill $ErlangPid
  cleanup
  exit
}

function idle() {
  while true; do
    sleep 60
  done
}

function cleanup() {
  info "removing: $SystemDir"
  rm -rf $SystemDir
}

function isWritable() {
  local -r dir=$1
  local -r randomName=`mktemp -u XXXXXXXXXX`
  if touch $dir/$randomName; then
    rm $dir/$randomName
  else
    false
  fi
}


declare -r Script=rcs_sftpd
declare -r ScriptDir=`dirname $0`


declare -r UserDefault=expert
declare -r PasswordDefault=expert
declare -r PortDefault=`portDefault $USER`
declare -r OwnAddressDefault=`ownAddressHeuristic`


function die() {
  printf "$Script: FATAL: $1\n" >&2
  exit 1
}

function warning() {
  printf "$Script: WARNING: $1\n" >&2
}

function info() {
  printf "$Script: INFO: $1\n" >&2
}


declare OptionPatterns=""
OptionPatterns+="a:"
OptionPatterns+="d:"
OptionPatterns+="h"
OptionPatterns+="p:"
OptionPatterns+="q:"
OptionPatterns+="u:"
OptionPatterns+="v"
OptionPatterns+="w:"

function help() {
  cat <<EOF
Usage is: $Script [OPTIONS]

Options are:
  -a ADDRESS     specify own address, defaults to $OwnAddressDefault
  -d DIRECTORY   directory to publish by SFTP, defaults to `pwd`
  -h             this help
  -p PORT        port that SFTP client should use, defaults to $PortDefault
  -q PORT        query TCP status of PORT
  -u USER        username that clients should use, defaults to '$UserDefault'
  -v             verbose
  -w PASSWORD    password that clients should use, defaults to '$PasswordDefault'

Examples:
  $Script              publish the current directory over SFTP
  $Script -p 3322      publish the current directory over SFTP using port 3322

EOF
}


declare OwnAddress=$OwnAddressDefault
declare PublishedDir=`pwd`
declare Port=$PortDefault
declare QueryPort=0
declare SftpUser=$UserDefault
declare Password=$PasswordDefault
declare Verbose=false
while getopts $OptionPatterns OPT; do
  case "$OPT" in
    a)
      OwnAddress=$OPTARG;;
    d)
      PublishedDir=$OPTARG;;
    h)
      help
      exit;;
    p)
      Port=$OPTARG;;
    q)
      QueryPort=$OPTARG;;
    u)
      SftpUser=$OPTARG;;
    v)
      Verbose=true;;
    w)
      Password=$OPTARG;;
    *)
      die "Unknown option, try -h for help"
  esac
done

shift $((OPTIND - 1))

if [[ $# -gt 0 ]]; then
  die "arguments not allowed, try -h for help"
fi

if [[ "$QueryPort" != 0 ]]; then
  queryPort $QueryPort
  exit
fi


# Beams in .../out will be used if present
declare -r EbinDirs="
  $RCT_TOP/test/release/rcs-sftpd/ebin
  $RCT_TOP/test/lib/rcs-sftpd/out
"


if command -v erl >/dev/null; then
  info "using Erlang: `which erl`"
else
  die "no Erlang available"
fi


if [[ ! -d $PublishedDir ]]; then
  die "not a directory: $PublishedDir"
fi


if portInUse $Port; then
  die "port $Port is in use, try specifying another port with the -p option"
fi


declare -r SystemDir=`mktemp -d /tmp/sftpLite-$USER-XXXXXX`
ssh-keygen -q -t rsa -f $SystemDir/ssh_host_rsa_key -N ''
info "generated public/private keys to $SystemDir"



info "starting SFTP daemon on port $Port expecting credentials: user=$SftpUser, password=$Password"
info "useful SFTP client options are: -o Port=$Port -o User=$SftpUser -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
info "SFTP directory URL: sftp://$SftpUser@$OwnAddress:$Port/"


if isWritable $PublishedDir; then
  info "published directory $PublishedDir is writable"
else
  warning "published directory $PublishedDir is not writable, PUT operations will not succeed"
fi


trap intHandler SIGINT


info "to stop the SFTP server, type Ctrl-C"


declare -r Invocation="erl +B i -pa $EbinDirs -noshell -run sftpd sftpd $Port $SftpUser $Password $PublishedDir $SystemDir $Verbose"

if [[ $Verbose == true ]]; then
  info "executing: $Invocation"
  $Invocation &
  declare -r ErlangPid=$!
else
  $Invocation >/dev/null &
  declare -r ErlangPid=$!
fi


idle
