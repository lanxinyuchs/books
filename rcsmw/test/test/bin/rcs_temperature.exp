#!/usr/bin/env expect
## ----------------------------------------------------------
## Copyright (c) Ericsson AB 2015 All rights reserved.
##
## The information in this document is the property of Ericsson.
##
## Except as specifically authorized in writing by Ericsson, the
## receiver of this document shall keep the information contained
## herein confidential and shall protect the same in whole or in
## part from disclosure and dissemination to third parties.
##
## Disclosure and disseminations to the receivers employees shall
## only be made on a strict need to know basis.
## ----------------------------------------------------------
## #1.    REVISION LOG
## ----------------------------------------------------------
## Rev        Date         Name        What
## --------   --------     --------    ------------------------
## R2A/1      2012-02-20   etxkols     Created
## R2A/2      2012-04-24   etxkols     Took care of Permission denied
## R2A/3      2012-04-30   etxkols     Password prompt changed
## R2A/3      2012-04-30   etxkols     Permission denied fix
## R2A/4      2013-09-05   etxkols     Filter out type == tcu03 (different sensors)
## R2A/5      2014-01-13   etxkols     Sensors for tcu03
## R2A/6      2014-01-16   etxkols     Sensors for dus5201
## R2A/7      2014-01-16   etxkols     One more try with sensors for dus5201
## R2A/10     2014-05-12   etxkols     fix if temp1_input does not exist
## R2A/11     2014-11-03   etxkols     new format arm temps
## R3A/1      2015-05-04   etxkols     tcu04
## R3A/2      2015-05-05   etxkols     tcu04
## R4A/1      2015-08-20   etxkols     Exclude EE boards
## ----------------------------------------------------------

proc usage {} {
    puts "rcs_temperature.exp Maxtemp"
    puts "Maxtemp:     Integer, Max allowed temperature in centigrades."
    puts "Description: Scans HW in lab and reads temperature sensors."
    puts "             If temperature > Maxtemp for any HW, script exits with 1"
    puts "             If HW cannot be reached, 0 is printed"
    puts "Example:     rcs_temperature.exp 70"
    exit 1
}

if { $argc != 1 } {
    usage
}
set MAXTEMP [lindex $argv 0]
#set USER "root"
#set PASSWORD "root"
set TIMEOUT 2

set timeout $TIMEOUT
log_user 0
proc cmd {Ip Cmd} {
    global USER PASSWORD
    spawn ssh ${USER}@${Ip} $Cmd
    match_max 5000
    expect {
        "Permission denied, please try again." {
            close
            wait
            return "no_login"
        }
        "Password:" {
            exp_send "${PASSWORD}\r"
            exp_continue
        }
        "password:" {
            exp_send "${PASSWORD}\r"
            exp_continue
        }
        "(yes/no)" {
            exp_send "yes\r"
            exp_continue
        }
        eof {
             wait
             return $expect_out(buffer)
        }
        "Connection refused" {
            close
            wait
#	    puts "Connection refused"
            return "no_login"
        }
        "Connection closed by remote host" {
            close
            wait
#	    puts "Connection closed by remote host"
            return "no_login"
        }
        timeout {
            close
            wait
#	    puts timeout
            return "no_login"
        }
    }
}

set HOME $::env(HOME)
puts "rm -f ${HOME}/.ssh/known_hosts"
exec rm -f ${HOME}/.ssh/known_hosts
set File [exec cat /proj/webdocs/rbs-rde-wiki/root/data/Main/LabConfig.txt]
set Lines [split $File "\n"]
set Result 0
set FailedHosts ""
puts "MAXTEMP: $MAXTEMP degrees"
set MIDDLEWAREBOARDS [exec  sed -n {s/.*<name>\([a-z][a-z]*[0-9][0-9]*\)<\/name>/\1/p} /proj/webdocs/rbs-rde-ci/jenkinsdata/config.xml]
puts $MIDDLEWAREBOARDS

puts [format "%-15s %-15s %6s %6s %6s %6s %6s %6s " "Name" "IP address" axm0 axm1 axm2 Ts1 Ts2 Ts3]
set USER "testbox"
set PASSWORD "testbox"
foreach Line $Lines {
    if ![string match %META* $Line] {
	if [string match *\*hw\** $Line] {
	    set Items [split $Line "|"]
	    set N [lsearch $Items *ssh_lmt_ipv4*]
	    set TypeN [lsearch $Items *type*]
	} else {
	    set Items [split $Line "|"]
	    set Host [lindex $Items 1]
	    set Type [string trim [lindex $Items $TypeN]]
	    if { $Type == "tcu03" || $Type == "dus5201" || $Type == "dus3201" || $Type == "tcu0401" } {
		if { [lsearch $MIDDLEWAREBOARDS [string trim "$Host"]] != -1 } {
		    set Output [list 0 0 0 0 0 0]		    
		    set IP [lindex $Items $N]
		    if {[regexp {([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*} $IP matched IP2]} {
			set AXM [cmd $IP2 "bash -l -c \"testbox axm_read_temp --verbose 2\";\
                                       bash -l -c \"testbox i2c_temp_sensor --verbose 2\""]
#		    puts "$Host $AXM"
			set Output [list 0 0 0 0 0 0]		    
			if { $AXM == "no_login"} {
			} else {
			    foreach AxmLine [split $AXM "\n"] {
				if [regexp {Temp Sensor\[0\] at AXM has temperature = *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 0 0 $Temp]
				} elseif [regexp {Temp Sensor\[1\] at AXM has temperature = *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 1 1 $Temp]
				} elseif [regexp {Temp Sensor\[2\] at AXM has temperature = *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 2 2 $Temp]
				} 
				if [regexp {Temperature of sensor \[0\]: *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 0 0 $Temp]
				} elseif [regexp {Temperature of sensor \[1\]: *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 1 1 $Temp]
				} elseif [regexp {Temperature of sensor \[2\]: *(.*) C} $AxmLine matched Temp] {
				    set Output [lreplace $Output 2 2 $Temp]
				} 
				if [regexp {Temperature from sensor 1 : *(.*) mC} $AxmLine matched Temp] {
				    set Output [lreplace $Output 3 3 [expr {round($Temp / 1000)}]]
				} elseif [regexp {Temperature from sensor 2 : *(.*) mC} $AxmLine matched Temp] {
				    set Output [lreplace $Output 4 4 [expr {round($Temp / 1000)}]]
				} elseif [regexp {Temperature from sensor 3 : *(.*) mC} $AxmLine matched Temp] {
				    set Output [lreplace $Output 5 5 [expr {round($Temp / 1000)}]]
				}
			    }
			    set FailedHost 0
			    foreach i $Output {
				if { $i > $MAXTEMP } {
				    set Result 1
				    set FailedHost 1
				}
			    }
			    if $FailedHost {
				set FailedHosts "$FailedHosts $Host"
				
			    }	
			}
			set hwmon0 [lindex $Output 0]
			set hwmon1 [lindex $Output 1]
			set hwmon2 [lindex $Output 2]
			set hwmon3 [lindex $Output 3]
			set hwmon4 [lindex $Output 4]
			set hwmon5 [lindex $Output 5]
			puts [format "%-15s %-15s %6i %6i %6i %6i %6i %6i " [string trim "$Host"] $IP2 $hwmon0 $hwmon1 $hwmon2 $hwmon3 $hwmon4 $hwmon5]
		    }
		} else {
		    puts [format "%-15s EE board" [string trim "$Host"]]
		}
	    }
	}
    }
}
puts ""
puts [format "%-15s %-15s %6s %6s %6s %6s %6s %6s " "Name" "IP address" hwmon0 hwmon1 hwmon2 hwmon3 hwmon4 hwmon5]
set USER "root"
set PASSWORD "root"
foreach Line $Lines {
    if ![string match %META* $Line] {
	if [string match *\*hw\** $Line] {
	    set Items [split $Line "|"]
	    set N [lsearch $Items *ssh_lmt_ipv4*]
	    set TypeN [lsearch $Items *type*]
	} else {
	    set Items [split $Line "|"]
	    set Host [lindex $Items 1]
	    set Type [string trim [lindex $Items $TypeN]]
	    if { $Type != "tcu03" && $Type != "dus5201" && $Type != "dus3201" && $Type != "tcu0401"} {	
		set IP [lindex $Items $N]
		if {[regexp {([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*} $IP matched IP2]} {
		    set Hwmons [cmd $IP2 "cat /sys/class/hwmon/hwmon0/device/temp1_input;\
                                      cat /sys/class/hwmon/hwmon1/device/temp1_input;\
                                      cat /sys/class/hwmon/hwmon2/device/temp1_input;\
                                      cat /sys/class/hwmon/hwmon3/device/temp1_input;\
                                      cat /sys/class/hwmon/hwmon4/device/temp1_input;\
                                      cat /sys/class/hwmon/hwmon5/device/temp1_input"]
		    set Hwmons [string trim $Hwmons]
		    if { $Hwmons == "no_login"} {
			set Output [list 0 0 0 0 0 0]		    
		    } else {
			set Temps [split $Hwmons "\n"]
			set Output {}
			set FailedHost 0
			foreach i $Temps {
			    if [string match "*No such file or directory*" $i] {
				set Temp 0
			    } else {
				set Temp [expr $i / 1000]
				if { $Temp > $MAXTEMP } {
				    set Result 1
				    set FailedHost 1
				}
			    }
			    set Output [lappend Output $Temp]
			}
			if $FailedHost {
			    set FailedHosts "$FailedHosts $Host"
			}
		    }
		    set hwmon0 [lindex $Output 0]
		    set hwmon1 [lindex $Output 1]
		    set hwmon2 [lindex $Output 2]
		    set hwmon3 [lindex $Output 3]
		    set hwmon4 [lindex $Output 4]
		    set hwmon5 [lindex $Output 5]
		    puts [format "%-15s %-15s %6i %6i %6i %6i %6i %6i " [string trim "$Host"] $IP2 $hwmon0 $hwmon1 $hwmon2 $hwmon3 $hwmon4 $hwmon5]
		}
	    }
	}
    }
}
if $Result {
    puts "FAILED HOSTS (Temp > $MAXTEMP degrees): $FailedHosts"
}
exit $Result
