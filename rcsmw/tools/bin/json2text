#!/usr/bin/env python2
"""
Extract a data item from a JSON file.

SEE ALSO
  -

"""

import argparse
import json

def parse_command_line():
    """ Parse command line arguments """

    parser = argparse.ArgumentParser(
        description='Print a single data item in a JSON structure')
    parser.add_argument(
        "file",
        help="file with JSON data")
    parser.add_argument(
        "key",
        help="the key to find")
    options = parser.parse_args()
    return options


def find_by_key(structure, key_name):
    '''
    Recursively traverse provided structure of nested dictionaries
    and return list of values where key match provided key.

    :param structure:
        Dictionary with nested dictionaries and lists
    :param key_name:
        Key too look for
    :return:
        String containing value of the item that matched provided key
    :raises:
    ValueError:
        If provided structure is not a dictionary
    IOError:
        If nothing found
    '''
    result = []
    # Check that we got a dictionary
    if not isinstance(structure, dict):
        raise ValueError("{} is not a dict but a {}"
                         "".format(structure,
                                   structure.__class__.__name__))
    # If key is found in the first level dictionary then return its
    # value and exit
    if key_name in structure.keys():
        result.append(structure[key_name])
    # Recurse through nested dictionaries
    for value in structure.values():
        if isinstance(value, dict):
            result += find_by_key(value, key_name)
    return result


def main():
    """Main function"""
    options = parse_command_line()
    with open(options.file) as f:
        event = json.load(f)
        answer = find_by_key(event, options.key)
        if answer:
            if len(answer) == 1:
                print answer[0]
            else:
                raise IOError("many values returned as response: {}".format(answer))


if __name__ == '__main__':
    main()