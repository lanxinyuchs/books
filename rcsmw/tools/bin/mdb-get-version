#!/usr/bin/env python
"""
NAME

        mdb-get-version - print versions in a product's baselines in InfoBank

SYNOPSIS

        mdb-get-version <heystack> <revision> <needle>

DESCRIPTION

        This program looks for all revisions of the product number <needle>
        in the module delivery baselines for the product number <heystack>
        with revision <revision>. The revisions are printed on separate lines
        to standard out.

        Print all revisions of CXP2020249_1 in MDBs for CXP9033381_1-P1A197:

        mdb-get-version CXP9033381_1 P1A197 CXP2020249_1

OPTIONS

        --debug    print debugging information
        --help     print a help message
        --verbose  print informational messages


SEE ALSO
        -

"""

import argparse
import logging
import infobank.v2.get as get
import sys
import time


def parse_command_line():
    """ Parse command line arguments """

    parser = argparse.ArgumentParser(
        description='Return the R-state for a product in module delivery'
                    'baselines')
    parser.add_argument(
        "haystack",
        help="the product number to retrieve baselines for")
    parser.add_argument(
        "revision",
        help="the product version to retrieve baselines for")
    parser.add_argument(
        "needle",
        help="the product number to lookup version for in the baselines")
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Print more information")
    parser.add_argument(
        "--debug",
        action="store_true",
        help="Print even more information")
    options = parser.parse_args()
    if options.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logging.debug("Loglevel set to: debug")
    elif options.verbose:
        logging.getLogger().setLevel(logging.INFO)
        logging.info("Loglevel set to: verbose")
    return options


def main():
    """Main function"""
    logging.basicConfig(format='%(asctime)s %(levelname)s %(message)s')
    options = parse_command_line()
    logging.debug("Options parsed: %s", options)
    retries = 60
    retry_pause_seconds = 30
    total_retry_time = retries * retry_pause_seconds
    while retries > 0:
        logging.info("Fetching module delivery baseline from Infobank")
        baselines = get.revision_baselines(product_number=options.haystack,
                                           rstate=options.revision)
        if baselines:
            break
        retries -= 1
        time.sleep(retry_pause_seconds)

    if not baselines:
        logging.error("""Failed to fetch module delivery baseline from """
                      """Infobank for %i minutes. Giving up.""",
                      total_retry_time / 60)
        sys.exit(1)
    for baseline in baselines:
        if 'includedRevisions' not in baseline:
            continue
        for entry in baseline['includedRevisions']:
            if 'rstate' in entry \
                    and 'product' in entry \
                    and 'productNumber' in entry['product'] \
                    and entry['product']['productNumber'] == options.needle:
                print entry['rstate']
                return


if __name__ == '__main__':
    main()
