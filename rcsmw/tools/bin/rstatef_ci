#!/usr/bin/env bash

# Function which consumes the R-state for the current product and track.
#
# Input environment variables:
#
# ARTIFACT_ID - product identity/product number for the product
# PROJECT - project, e.g. g2
# TRACK - track, e.g. 17A
#
# Output:
#
# VERSION - new version of the product (stdout)
#

#set -x
set -euo pipefail

print_help() {
  cat << EOF
Description: 
  Function which consumes the R-state for the current product and track.

Options:

    --project, -p              Project, e.g. 5G currently or 18A
    --track, -t                RCS track, e.g. main

Usage:

     rstatef_ci --project 5G --track main CXC1739608_4
EOF
}

source ${MODULESHOME-/app/modules/0}/init/bash
module use /app/plf_tools/bs_g2/python_modules/modulefiles
module add ciutils/${CIUTILS_VERSION-2.2.18}



parse_command_line_options() {
  while true; do
          case $# in
            0)
            break
            ;;
          esac

          case $1 in
              -h | --help)
                print_help
                exit 0
                ;;
              -p | --project)
                PROJECT="$2";
                shift; shift;
                ;;
              -t | --track)
                TRACK="$2";
                shift; shift;
                ;;
              CX*)
                ARTIFACT_ID="$1";
                shift;
                ;;
              *)
                shift
                ;;
          esac
  done

  # Check that we receive all info

  if [ -z "${ARTIFACT_ID-}" ];then
    abort "ARTIFACT_ID is not defined"
  fi
  if [ -z "${PROJECT-}" ];then
    abort "PROJECT is not defined"
  fi
  if [ -z "${TRACK-}" ];then
    abort "TRACK is not defined"
  fi
}

# For non "default" path, create managed structures writable for all in unix group 
if [[ ${RSTATE_ROOT_DIR-} ]]; then
    umask 002
fi

if [[ ${REGRESSION_TEST_MODE-} ]]; then
    RSTATE_ROOT_DIR=${WORKSPACE}/rcs_mw_rstate
fi

RSTATE_ROOT_DIR=${RSTATE_ROOT_DIR-/proj/rcs-tmp/rcs_mw_rstate}

DB_RSTATE_PATH="${RSTATE_ROOT_DIR}/rcs_mw_rstate.db"

if [[ ${REGRESSION_TEST_MODE-} ]]; then
    mkdir -p $(dirname ${DB_RSTATE_PATH})
    rstate-base init --database ${DB_RSTATE_PATH}
    rstate-base set $PROJECT $TRACK P1A --database ${DB_RSTATE_PATH}
    LATEST="${RSTATE_ROOT_DIR}/products/${ARTIFACT_ID}/${PROJECT}/${TRACK}/latest"
    mkdir -p $(dirname $LATEST)
    echo P2B22 > $LATEST
fi

# Print basic usage information
abort() {
    echo "ERROR: $*" 2>&1
    print_help
    exit 2
}

# Declared variables

parse_command_line_options "$@"

#Check R-state base
if [[ ! ${RSTATE_BASE-} ]]; then
    RSTATE_BASE=`rstate-base get ${PROJECT} ${TRACK} --database ${DB_RSTATE_PATH}`
fi

if [[ ! ${RSTATE_BASE-} ]]; then
    abort "Missing R-state base in database!"
fi

# File where latest product version is stored. One file per project and track.
LATEST="${RSTATE_ROOT_DIR}/products/${ARTIFACT_ID}/${PROJECT}/${TRACK}/latest"

# Get slashed product type (FALSE or something else)
if [[ ! ${SLASHED-} ]]; then
    SLASHED=`rstate-base getSlashed ${PROJECT} ${TRACK} --database ${DB_RSTATE_PATH}`
fi

#Is this first build on the new track?
if [ ! -f ${LATEST} ];then
    mkdir -p ${RSTATE_ROOT_DIR}/products/${ARTIFACT_ID}/${PROJECT}/${TRACK}
    touch ${LATEST}
    chmod 644 ${LATEST}
    if [[ ${SLASHED} == "FALSE" ]]; then
        VERSION="${RSTATE_BASE}01"
    else
        VERSION="${RSTATE_BASE}/1"
    fi
else
    #Get latest consumed R-state for the product
    PREVIOUS_VERSION=`cat ${LATEST}`

    #Increment R-state
    if [[ ${SLASHED} == "FALSE" ]]; then
        # Start from 01 if the R-state base has changed
        if [[ ! $PREVIOUS_VERSION =~ ^${RSTATE_BASE}[0-9/] ]]; then
            VERSION="${RSTATE_BASE}01"
        else
            VERSION=`increment_rev.py ${PREVIOUS_VERSION}`
        fi
    else
        if [[ ! $PREVIOUS_VERSION =~ ^${RSTATE_BASE}[0-9/] ]]; then
            abort "Consumed R-state does not match R-state base"
        fi
        # Remove everything up to the first /
        AMENDMENT=${PREVIOUS_VERSION##*/}
        AMENDMENT=`echo $((${AMENDMENT} + 1))`
        VERSION="${RSTATE_BASE}/${AMENDMENT}"
    fi

    #Check that generated R-state has valid R-state base
    if [[ ! $VERSION =~ ^${RSTATE_BASE}[0-9/] ]]; then
        abort "New R-state does not match R-state base"
    fi
fi

# Check that R-state syntax is OK
if ! echo "${VERSION}" | ChRState > /dev/null; then
    abort "Syntax error in created R-state [${VERSION}]"
fi


echo "${VERSION}" > ${LATEST}
echo ${VERSION}

