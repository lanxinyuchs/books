#!/usr/bin/expect -f

set argc [llength $argv]
if {$argc < 2} {
   puts "\nBrief : Setup uboot environment to original"
   puts "\nNote! all the expect * - is to flush expect output buffer"
   puts "since author is lazy and don't care to match on everything"
   puts "when it has no practical value. Don't remove them!\n"
   puts "\nSyntax: $argv0 <board> <image>\n"
   puts "\ne.g:\n"
   puts "- $argv0 dus3020 linux-arm.img"
   puts "- $argv0 tcu4036 linux.img"
   puts "- $argv0 tcu050 linux.img"
   exit 1
}

set board   [lindex $argv 0]

trap {
     puts "\nKilled by signal\n"
     exit 1
} SIGINT

puts "\nSetup uboot environment on board $board\n"
         
# Establish connection
set timeout 10
spawn /proj/rcs/bin/rcs_telnet.pl $board
expect {
    timeout {puts "\nNo contact with the board, GoodBye!\n"; exit 1}
   "yes/no" {send "yes\r"; exp_continue}
    "Escape character is '^]'."
}

# Are we alive?

set timeout 10
send "root\r"
sleep  1
expect {
        timeout {
                puts "\nNot possible to login\n"
                exit 1
        }	
	"*login:" { send "root\r"; exp_continue }
	"*assword:" { send "root\r"; set cmd 1 }
	"*command not found"       { set cmd 1 }
}

set timeout 70
send "pgh_restartbrd 10\r"

# verify that uboot stage2 started correctly
expect {
        timeout {
                puts "\nk.0: U-Boot stage2 not started, timeout. GoodBye!\n"
                exit 1
        }
        "RCS: Reset Status = HW Watchdog" {
                puts "\nk.0: watchdog restart detected in U-Boot. GoodBye!\n"
                exit 1
        }
	"System initialized"
}

# Stop in Stage 3
expect {
        timeout {
                puts "\nk.1: U-Boot stage3 not started, timeout. GoodBye!\n"
                exit 1
        }
        "RCS: Reset Status = HW Watchdog" {
                puts "\nk.1: watchdog restart detected in U-Boot. GoodBye!\n"
                exit 1
        }
       "Hit any key to stop autoboot" { send "\r" }
}

sleep 1
set timeout 5

#
# Set bootargs
#
expect *
send "\r"
expect {
       timeout {
       	       puts "\n1: U-Boot stage3 not stopped, timeout. GoodBye!\n"
	       exit 1
       }
       "=>" {
	    expect *
       	    send "setenv bootargs \'console=ttyAMA0,115200n8 earlyprintk debug initrd=0x08000000,30M ramdisk_size=30000 rdinit=/linuxrc.sh\'\r"
       }
}
expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
	    expect *
       	    send "printenv bootargs\r"
	    expect {
	    	   timeout {
		   	   puts "\n1: Unable to verify bootargs setting. GoodBye!\n"
			   interact +++ return
                   }
		   "console=ttyAMA0,115200n8 earlyprintk debug initrd=0x08000000,30M ramdisk_size=30000 rdinit=/linuxrc.sh" {
		   	   sleep 1
                   }
           }
      }
}

# Set loadnlkernel
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "setenv loadnlkernel \r"
       }
}


# Set loadnlramdisk
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "setenv loadnlramdisk \r"
       }
}


# Set nlboot
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "setenv nlboot \r"
       }
}


# Set nlbootargs
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "setenv nlbootargs \r"
       }
}


# Set startnl
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "setenv startnl \r"
       }
}

# Save env variables
#

expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "saveenv \r"
       }
}



# boot the kernel
#
expect *
send "\r"
expect {
       timeout {
               puts "\n1: Unable to get uboot prompt. GoodBye!\n"
               exit 1
       }
       "=>" {
       	    expect *
            send "boot\r"
       }
}

# Loginto the board
#
set timeout 60

send "root\r"
sleep  1
expect {
        timeout {
                puts "\nNot possible to login\n"
                exit 1
        }	
	"*login:" { send "root\r"; exp_continue }
	"*assword:" { send "root\r"; set cmd 1 }
	"*command not found"       { set cmd 1 }
}

puts "\nIt looks ok to expect - do saveenv, saveenv if it looks ok to you to?"
puts "\nMagic key stroke to return to control to expect is +++ which will terminate this session"
puts "Note! You probably want to type boot first!\n"


expect *

interact +++ return



